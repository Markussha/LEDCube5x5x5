
LEDCube.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  00000fc2  00001056  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000fc2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001bb  0080010a  0080010a  00001060  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001060  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001090  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000250  00000000  00000000  000010d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c2e  00000000  00000000  00001320  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000fb6  00000000  00000000  00002f4e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001709  00000000  00000000  00003f04  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004e4  00000000  00000000  00005610  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007a0  00000000  00000000  00005af4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000b5e  00000000  00000000  00006294  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001c0  00000000  00000000  00006df2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 58 03 	jmp	0x6b0	; 0x6b0 <__vector_2>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__vector_9>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 d8 05 	jmp	0xbb0	; 0xbb0 <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 ec       	ldi	r30, 0xC2	; 194
  7c:	ff e0       	ldi	r31, 0x0F	; 15
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 30       	cpi	r26, 0x0A	; 10
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	22 e0       	ldi	r18, 0x02	; 2
  8c:	aa e0       	ldi	r26, 0x0A	; 10
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a5 3c       	cpi	r26, 0xC5	; 197
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 56 06 	call	0xcac	; 0xcac <main>
  9e:	0c 94 df 07 	jmp	0xfbe	; 0xfbe <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <animate>:
//Zurückgegebene Werte	: keine
//----------------------------------------------------------------------------------------------
void animate(unsigned char mode) {
	
	//letzten Modus schreiben
	savemode = mode;
  a6:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
	
	//vergleiche Modus mit letztem Modus
	if(prevmode != mode) {
  aa:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <prevmode>
  ae:	89 17       	cp	r24, r25
  b0:	69 f1       	breq	.+90     	; 0x10c <animate+0x66>
  b2:	e0 e2       	ldi	r30, 0x20	; 32
  b4:	f1 e0       	ldi	r31, 0x01	; 1
  b6:	2d e9       	ldi	r18, 0x9D	; 157
  b8:	31 e0       	ldi	r19, 0x01	; 1
		//cleare das gesamte LED-Array
		for(unsigned char i = 0; i < 125; i++) {
			led[i] = 0;
  ba:	11 92       	st	Z+, r1
	savemode = mode;
	
	//vergleiche Modus mit letztem Modus
	if(prevmode != mode) {
		//cleare das gesamte LED-Array
		for(unsigned char i = 0; i < 125; i++) {
  bc:	e2 17       	cp	r30, r18
  be:	f3 07       	cpc	r31, r19
  c0:	e1 f7       	brne	.-8      	; 0xba <animate+0x14>
			led[i] = 0;
		}
		prevmode = mode;
  c2:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <prevmode>
	}
	
	//je mach Modus die richtige Animation ausführen
	switch(mode) {
  c6:	83 30       	cpi	r24, 0x03	; 3
  c8:	89 f0       	breq	.+34     	; 0xec <animate+0x46>
  ca:	28 f4       	brcc	.+10     	; 0xd6 <animate+0x30>
  cc:	81 30       	cpi	r24, 0x01	; 1
  ce:	41 f0       	breq	.+16     	; 0xe0 <animate+0x3a>
  d0:	82 30       	cpi	r24, 0x02	; 2
  d2:	49 f0       	breq	.+18     	; 0xe6 <animate+0x40>
  d4:	08 95       	ret
  d6:	84 30       	cpi	r24, 0x04	; 4
  d8:	61 f0       	breq	.+24     	; 0xf2 <animate+0x4c>
  da:	85 30       	cpi	r24, 0x05	; 5
  dc:	a1 f0       	breq	.+40     	; 0x106 <animate+0x60>
  de:	08 95       	ret
		case 1:		strandtest(); break;
  e0:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <strandtest>
  e4:	08 95       	ret
		case 2:		topbottom(); break;
  e6:	0e 94 12 02 	call	0x424	; 0x424 <topbottom>
  ea:	08 95       	ret
		case 3:		explosion(); break;
  ec:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <explosion>
  f0:	08 95       	ret
  f2:	e0 e2       	ldi	r30, 0x20	; 32
  f4:	f1 e0       	ldi	r31, 0x01	; 1
  f6:	2d e9       	ldi	r18, 0x9D	; 157
  f8:	31 e0       	ldi	r19, 0x01	; 1
		case 4:		for(unsigned char i = 0; i < 125; i++) {
					led[i] = 1;
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	81 93       	st	Z+, r24
	//je mach Modus die richtige Animation ausführen
	switch(mode) {
		case 1:		strandtest(); break;
		case 2:		topbottom(); break;
		case 3:		explosion(); break;
		case 4:		for(unsigned char i = 0; i < 125; i++) {
  fe:	e2 17       	cp	r30, r18
 100:	f3 07       	cpc	r31, r19
 102:	e1 f7       	brne	.-8      	; 0xfc <animate+0x56>
 104:	08 95       	ret
					led[i] = 1;
					}break;
		case 5:		ranranrandom(); break;
 106:	0e 94 93 01 	call	0x326	; 0x326 <ranranrandom>
		default: break;
	}
	

}
 10a:	08 95       	ret
		}
		prevmode = mode;
	}
	
	//je mach Modus die richtige Animation ausführen
	switch(mode) {
 10c:	83 30       	cpi	r24, 0x03	; 3
 10e:	71 f3       	breq	.-36     	; 0xec <animate+0x46>
 110:	28 f4       	brcc	.+10     	; 0x11c <animate+0x76>
 112:	81 30       	cpi	r24, 0x01	; 1
 114:	29 f3       	breq	.-54     	; 0xe0 <animate+0x3a>
 116:	82 30       	cpi	r24, 0x02	; 2
 118:	31 f3       	breq	.-52     	; 0xe6 <animate+0x40>
 11a:	08 95       	ret
 11c:	84 30       	cpi	r24, 0x04	; 4
 11e:	49 f3       	breq	.-46     	; 0xf2 <animate+0x4c>
 120:	85 30       	cpi	r24, 0x05	; 5
 122:	89 f3       	breq	.-30     	; 0x106 <animate+0x60>
 124:	08 95       	ret

00000126 <modeswitch>:
//bei Drücken des mittleren Knopfes (Button2) Aktion ausführen
//Aufgerufene Funktionen: siehe animations/*
//Zurückgegebene Werte	: keine
//----------------------------------------------------------------------------------------------
void modeswitch() {
	switch(savemode) {
 126:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 12a:	81 30       	cpi	r24, 0x01	; 1
 12c:	19 f0       	breq	.+6      	; 0x134 <modeswitch+0xe>
 12e:	82 30       	cpi	r24, 0x02	; 2
 130:	21 f0       	breq	.+8      	; 0x13a <modeswitch+0x14>
 132:	08 95       	ret
		case 1: strandtest_mode(); break;
 134:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <strandtest_mode>
 138:	08 95       	ret
		case 2: topbottom_mode(); break;
 13a:	0e 94 af 02 	call	0x55e	; 0x55e <topbottom_mode>
 13e:	08 95       	ret

00000140 <calcwaves>:

//WaveArrays
unsigned char wave0, wave1[6], wave2[30], wave3[6*4*4]; 

//berechne umliegende LEDs
void calcwaves(unsigned char ledi) {
 140:	0f 93       	push	r16
 142:	1f 93       	push	r17
 144:	cf 93       	push	r28
 146:	df 93       	push	r29
 148:	18 2f       	mov	r17, r24
	
	wave1[0] = ledtop(ledi);
 14a:	0e 94 dd 06 	call	0xdba	; 0xdba <ledtop>
 14e:	ce e9       	ldi	r28, 0x9E	; 158
 150:	d1 e0       	ldi	r29, 0x01	; 1
 152:	88 83       	st	Y, r24
	wave1[1] = ledbottom(ledi);
 154:	81 2f       	mov	r24, r17
 156:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <ledbottom>
 15a:	89 83       	std	Y+1, r24	; 0x01
	wave1[2] = ledleft(ledi);
 15c:	81 2f       	mov	r24, r17
 15e:	0e 94 6d 06 	call	0xcda	; 0xcda <ledleft>
 162:	8a 83       	std	Y+2, r24	; 0x02
	wave1[3] = ledright(ledi);
 164:	81 2f       	mov	r24, r17
 166:	0e 94 7d 06 	call	0xcfa	; 0xcfa <ledright>
 16a:	8b 83       	std	Y+3, r24	; 0x03
	wave1[4] = ledfront(ledi);
 16c:	81 2f       	mov	r24, r17
 16e:	0e 94 8b 06 	call	0xd16	; 0xd16 <ledfront>
 172:	8c 83       	std	Y+4, r24	; 0x04
	wave1[5] = ledback(ledi);
 174:	81 2f       	mov	r24, r17
 176:	0e 94 bd 06 	call	0xd7a	; 0xd7a <ledback>
 17a:	8d 83       	std	Y+5, r24	; 0x05
	
	//top1 relatives
	wave2[0] = ledtop(wave1[0]);
 17c:	88 81       	ld	r24, Y
 17e:	0e 94 dd 06 	call	0xdba	; 0xdba <ledtop>
 182:	04 ea       	ldi	r16, 0xA4	; 164
 184:	11 e0       	ldi	r17, 0x01	; 1
 186:	f8 01       	movw	r30, r16
 188:	80 83       	st	Z, r24
	wave2[1] = ledleft(wave1[0]);
 18a:	88 81       	ld	r24, Y
 18c:	0e 94 6d 06 	call	0xcda	; 0xcda <ledleft>
 190:	f8 01       	movw	r30, r16
 192:	81 83       	std	Z+1, r24	; 0x01
	wave2[2] = ledright(wave1[0]);
 194:	88 81       	ld	r24, Y
 196:	0e 94 7d 06 	call	0xcfa	; 0xcfa <ledright>
 19a:	f8 01       	movw	r30, r16
 19c:	82 83       	std	Z+2, r24	; 0x02
	wave2[3] = ledfront(wave1[0]);
 19e:	88 81       	ld	r24, Y
 1a0:	0e 94 8b 06 	call	0xd16	; 0xd16 <ledfront>
 1a4:	f8 01       	movw	r30, r16
 1a6:	83 83       	std	Z+3, r24	; 0x03
	wave2[4] = ledback(wave1[0]);
 1a8:	88 81       	ld	r24, Y
 1aa:	0e 94 bd 06 	call	0xd7a	; 0xd7a <ledback>
 1ae:	f8 01       	movw	r30, r16
 1b0:	84 83       	std	Z+4, r24	; 0x04
	
	//bottom1 relatives
	wave2[15] = ledtop(wave1[0]);
 1b2:	88 81       	ld	r24, Y
 1b4:	0e 94 dd 06 	call	0xdba	; 0xdba <ledtop>
 1b8:	f8 01       	movw	r30, r16
 1ba:	87 87       	std	Z+15, r24	; 0x0f
	wave2[16] = ledleft(wave1[0]);
 1bc:	88 81       	ld	r24, Y
 1be:	0e 94 6d 06 	call	0xcda	; 0xcda <ledleft>
 1c2:	f8 01       	movw	r30, r16
 1c4:	80 8b       	std	Z+16, r24	; 0x10
	wave2[17] = ledright(wave1[0]);
 1c6:	88 81       	ld	r24, Y
 1c8:	0e 94 7d 06 	call	0xcfa	; 0xcfa <ledright>
 1cc:	f8 01       	movw	r30, r16
 1ce:	81 8b       	std	Z+17, r24	; 0x11
	wave2[18] = ledfront(wave1[0]);
 1d0:	88 81       	ld	r24, Y
 1d2:	0e 94 8b 06 	call	0xd16	; 0xd16 <ledfront>
 1d6:	f8 01       	movw	r30, r16
 1d8:	82 8b       	std	Z+18, r24	; 0x12
	wave2[19] = ledback(wave1[0]);
 1da:	88 81       	ld	r24, Y
 1dc:	0e 94 bd 06 	call	0xd7a	; 0xd7a <ledback>
 1e0:	f8 01       	movw	r30, r16
 1e2:	83 8b       	std	Z+19, r24	; 0x13
	
	//left1 relatives
	wave2[5] = ledtop(wave1[2]);
 1e4:	8a 81       	ldd	r24, Y+2	; 0x02
 1e6:	0e 94 dd 06 	call	0xdba	; 0xdba <ledtop>
 1ea:	f8 01       	movw	r30, r16
 1ec:	85 83       	std	Z+5, r24	; 0x05
	wave2[6] = ledleft(wave1[2]);
 1ee:	8a 81       	ldd	r24, Y+2	; 0x02
 1f0:	0e 94 6d 06 	call	0xcda	; 0xcda <ledleft>
 1f4:	f8 01       	movw	r30, r16
 1f6:	86 83       	std	Z+6, r24	; 0x06
	wave2[7] = ledbottom(wave1[2]);
 1f8:	8a 81       	ldd	r24, Y+2	; 0x02
 1fa:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <ledbottom>
 1fe:	f8 01       	movw	r30, r16
 200:	87 83       	std	Z+7, r24	; 0x07
	wave2[8] = ledfront(wave1[2]);
 202:	8a 81       	ldd	r24, Y+2	; 0x02
 204:	0e 94 8b 06 	call	0xd16	; 0xd16 <ledfront>
 208:	f8 01       	movw	r30, r16
 20a:	80 87       	std	Z+8, r24	; 0x08
	wave2[9] = ledback(wave1[2]);
 20c:	8a 81       	ldd	r24, Y+2	; 0x02
 20e:	0e 94 bd 06 	call	0xd7a	; 0xd7a <ledback>
 212:	f8 01       	movw	r30, r16
 214:	81 87       	std	Z+9, r24	; 0x09
	
	//right1 relatives
	wave2[10] = ledtop(wave1[3]);
 216:	8b 81       	ldd	r24, Y+3	; 0x03
 218:	0e 94 dd 06 	call	0xdba	; 0xdba <ledtop>
 21c:	f8 01       	movw	r30, r16
 21e:	82 87       	std	Z+10, r24	; 0x0a
	wave2[11] = ledright(wave1[3]);
 220:	8b 81       	ldd	r24, Y+3	; 0x03
 222:	0e 94 7d 06 	call	0xcfa	; 0xcfa <ledright>
 226:	f8 01       	movw	r30, r16
 228:	83 87       	std	Z+11, r24	; 0x0b
	wave2[12] = ledbottom(wave1[3]);
 22a:	8b 81       	ldd	r24, Y+3	; 0x03
 22c:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <ledbottom>
 230:	f8 01       	movw	r30, r16
 232:	84 87       	std	Z+12, r24	; 0x0c
	wave2[13] = ledfront(wave1[3]);
 234:	8b 81       	ldd	r24, Y+3	; 0x03
 236:	0e 94 8b 06 	call	0xd16	; 0xd16 <ledfront>
 23a:	f8 01       	movw	r30, r16
 23c:	85 87       	std	Z+13, r24	; 0x0d
	wave2[14] = ledback(wave1[3]);
 23e:	8b 81       	ldd	r24, Y+3	; 0x03
 240:	0e 94 bd 06 	call	0xd7a	; 0xd7a <ledback>
 244:	f8 01       	movw	r30, r16
 246:	86 87       	std	Z+14, r24	; 0x0e
	
	//front1 relatives
	wave2[20] = ledtop(wave1[4]);
 248:	8c 81       	ldd	r24, Y+4	; 0x04
 24a:	0e 94 dd 06 	call	0xdba	; 0xdba <ledtop>
 24e:	f8 01       	movw	r30, r16
 250:	84 8b       	std	Z+20, r24	; 0x14
	wave2[21] = ledright(wave1[4]);
 252:	8c 81       	ldd	r24, Y+4	; 0x04
 254:	0e 94 7d 06 	call	0xcfa	; 0xcfa <ledright>
 258:	f8 01       	movw	r30, r16
 25a:	85 8b       	std	Z+21, r24	; 0x15
	wave2[22] = ledbottom(wave1[4]);
 25c:	8c 81       	ldd	r24, Y+4	; 0x04
 25e:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <ledbottom>
 262:	f8 01       	movw	r30, r16
 264:	86 8b       	std	Z+22, r24	; 0x16
	wave2[23] = ledfront(wave1[4]);
 266:	8c 81       	ldd	r24, Y+4	; 0x04
 268:	0e 94 8b 06 	call	0xd16	; 0xd16 <ledfront>
 26c:	f8 01       	movw	r30, r16
 26e:	87 8b       	std	Z+23, r24	; 0x17
	wave2[24] = ledleft(wave1[4]);
 270:	8c 81       	ldd	r24, Y+4	; 0x04
 272:	0e 94 6d 06 	call	0xcda	; 0xcda <ledleft>
 276:	f8 01       	movw	r30, r16
 278:	80 8f       	std	Z+24, r24	; 0x18
	
	//back1 relatives
	wave2[25] = ledtop(wave1[4]);
 27a:	8c 81       	ldd	r24, Y+4	; 0x04
 27c:	0e 94 dd 06 	call	0xdba	; 0xdba <ledtop>
 280:	f8 01       	movw	r30, r16
 282:	81 8f       	std	Z+25, r24	; 0x19
	wave2[26] = ledright(wave1[4]);
 284:	8c 81       	ldd	r24, Y+4	; 0x04
 286:	0e 94 7d 06 	call	0xcfa	; 0xcfa <ledright>
 28a:	f8 01       	movw	r30, r16
 28c:	82 8f       	std	Z+26, r24	; 0x1a
	wave2[27] = ledbottom(wave1[4]);
 28e:	8c 81       	ldd	r24, Y+4	; 0x04
 290:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <ledbottom>
 294:	f8 01       	movw	r30, r16
 296:	83 8f       	std	Z+27, r24	; 0x1b
	wave2[28] = ledback(wave1[4]);
 298:	8c 81       	ldd	r24, Y+4	; 0x04
 29a:	0e 94 bd 06 	call	0xd7a	; 0xd7a <ledback>
 29e:	f8 01       	movw	r30, r16
 2a0:	84 8f       	std	Z+28, r24	; 0x1c
	wave2[29] = ledleft(wave1[4]);
 2a2:	8c 81       	ldd	r24, Y+4	; 0x04
 2a4:	0e 94 6d 06 	call	0xcda	; 0xcda <ledleft>
 2a8:	f8 01       	movw	r30, r16
 2aa:	85 8f       	std	Z+29, r24	; 0x1d
	
}
 2ac:	df 91       	pop	r29
 2ae:	cf 91       	pop	r28
 2b0:	1f 91       	pop	r17
 2b2:	0f 91       	pop	r16
 2b4:	08 95       	ret

000002b6 <explosion>:

//bearbeitet die LED-Arrays
void explosion() {
	
	calcwaves(63);
 2b6:	8f e3       	ldi	r24, 0x3F	; 63
 2b8:	0e 94 a0 00 	call	0x140	; 0x140 <calcwaves>
 2bc:	a4 ea       	ldi	r26, 0xA4	; 164
 2be:	b1 e0       	ldi	r27, 0x01	; 1
 2c0:	22 ec       	ldi	r18, 0xC2	; 194
 2c2:	31 e0       	ldi	r19, 0x01	; 1
	
	for(uint8_t i = 0; i < 30; i++) {
		led[wave2[i]] = 1;
 2c4:	81 e0       	ldi	r24, 0x01	; 1
 2c6:	ed 91       	ld	r30, X+
 2c8:	f0 e0       	ldi	r31, 0x00	; 0
 2ca:	e0 5e       	subi	r30, 0xE0	; 224
 2cc:	fe 4f       	sbci	r31, 0xFE	; 254
 2ce:	80 83       	st	Z, r24
//bearbeitet die LED-Arrays
void explosion() {
	
	calcwaves(63);
	
	for(uint8_t i = 0; i < 30; i++) {
 2d0:	a2 17       	cp	r26, r18
 2d2:	b3 07       	cpc	r27, r19
 2d4:	c1 f7       	brne	.-16     	; 0x2c6 <explosion+0x10>
		led[wave2[i]] = 1;
	}
	
}
 2d6:	08 95       	ret

000002d8 <change>:
// uint8_t LED: LED, deren Zustand sich ändern soll (Wert zwischen 0 und 124)
// uint8_t onoff: soll die LED ein- oder ausgeschaltet werden?

void change(unsigned char LED, unsigned char onoff){

	led[LED] = onoff;
 2d8:	e8 2f       	mov	r30, r24
 2da:	f0 e0       	ldi	r31, 0x00	; 0
 2dc:	e0 5e       	subi	r30, 0xE0	; 224
 2de:	fe 4f       	sbci	r31, 0xFE	; 254
 2e0:	60 83       	st	Z, r22
 2e2:	08 95       	ret

000002e4 <__vector_9>:
		
	}
}


ISR(TIMER2_OVF_vect){
 2e4:	1f 92       	push	r1
 2e6:	0f 92       	push	r0
 2e8:	0f b6       	in	r0, 0x3f	; 63
 2ea:	0f 92       	push	r0
 2ec:	11 24       	eor	r1, r1
 2ee:	8f 93       	push	r24
	overflowcounter += 1; // 1 overflow alle 16,382 Millisekunden
 2f0:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <overflowcounter>
 2f4:	8f 5f       	subi	r24, 0xFF	; 255
 2f6:	80 93 24 02 	sts	0x0224, r24	; 0x800224 <overflowcounter>
	
	if (overflowcounter == 6){
 2fa:	86 30       	cpi	r24, 0x06	; 6
 2fc:	29 f4       	brne	.+10     	; 0x308 <__vector_9+0x24>
		Millis100 += 1;
 2fe:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <Millis100>
 302:	8f 5f       	subi	r24, 0xFF	; 255
 304:	80 93 23 02 	sts	0x0223, r24	; 0x800223 <Millis100>
	}
	if (Millis100 == 10){
 308:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <Millis100>
 30c:	8a 30       	cpi	r24, 0x0A	; 10
 30e:	29 f4       	brne	.+10     	; 0x31a <__vector_9+0x36>
		seconds += 1;
 310:	80 91 a2 02 	lds	r24, 0x02A2	; 0x8002a2 <seconds>
 314:	8f 5f       	subi	r24, 0xFF	; 255
 316:	80 93 a2 02 	sts	0x02A2, r24	; 0x8002a2 <seconds>
	}
}
 31a:	8f 91       	pop	r24
 31c:	0f 90       	pop	r0
 31e:	0f be       	out	0x3f, r0	; 63
 320:	0f 90       	pop	r0
 322:	1f 90       	pop	r1
 324:	18 95       	reti

00000326 <ranranrandom>:
unsigned char zufall1[15];
unsigned char zufall2[15];
unsigned char slowr = 1;

//gibt Daten ins LED-Array aus
void ranranrandom(){
 326:	8f 92       	push	r8
 328:	9f 92       	push	r9
 32a:	af 92       	push	r10
 32c:	bf 92       	push	r11
 32e:	cf 92       	push	r12
 330:	df 92       	push	r13
 332:	ef 92       	push	r14
 334:	ff 92       	push	r15
 336:	0f 93       	push	r16
 338:	1f 93       	push	r17
 33a:	cf 93       	push	r28
 33c:	df 93       	push	r29
	
	if(slowr == 15) {
 33e:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <slowr>
 342:	8f 30       	cpi	r24, 0x0F	; 15
 344:	b9 f5       	brne	.+110    	; 0x3b4 <ranranrandom+0x8e>
		slowr = 0;
 346:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <slowr>
 34a:	03 ea       	ldi	r16, 0xA3	; 163
 34c:	12 e0       	ldi	r17, 0x02	; 2
 34e:	c2 eb       	ldi	r28, 0xB2	; 178
 350:	d2 e0       	ldi	r29, 0x02	; 2
 352:	0f 2e       	mov	r0, r31
 354:	f2 eb       	ldi	r31, 0xB2	; 178
 356:	af 2e       	mov	r10, r31
 358:	f2 e0       	ldi	r31, 0x02	; 2
 35a:	bf 2e       	mov	r11, r31
 35c:	f0 2d       	mov	r31, r0
 35e:	7e 01       	movw	r14, r28
 360:	48 01       	movw	r8, r16
	
	for(unsigned char i = 0; i < 15; i++){
		change(zufall1[i], 0);			//schalte vorherige LEDs aus
		
		zufall2[i] = rand() % 125;	// bestimme neue LEDs
 362:	0f 2e       	mov	r0, r31
 364:	fd e7       	ldi	r31, 0x7D	; 125
 366:	cf 2e       	mov	r12, r31
 368:	d1 2c       	mov	r13, r1
 36a:	f0 2d       	mov	r31, r0
	
	if(slowr == 15) {
		slowr = 0;
	
	for(unsigned char i = 0; i < 15; i++){
		change(zufall1[i], 0);			//schalte vorherige LEDs aus
 36c:	60 e0       	ldi	r22, 0x00	; 0
 36e:	f4 01       	movw	r30, r8
 370:	81 91       	ld	r24, Z+
 372:	4f 01       	movw	r8, r30
 374:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <change>
		
		zufall2[i] = rand() % 125;	// bestimme neue LEDs
 378:	0e 94 6c 07 	call	0xed8	; 0xed8 <rand>
 37c:	b6 01       	movw	r22, r12
 37e:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <__divmodhi4>
 382:	f7 01       	movw	r30, r14
 384:	81 93       	st	Z+, r24
 386:	7f 01       	movw	r14, r30
void ranranrandom(){
	
	if(slowr == 15) {
		slowr = 0;
	
	for(unsigned char i = 0; i < 15; i++){
 388:	8a 14       	cp	r8, r10
 38a:	9b 04       	cpc	r9, r11
 38c:	79 f7       	brne	.-34     	; 0x36c <ranranrandom+0x46>
 38e:	0f 2e       	mov	r0, r31
 390:	f1 ec       	ldi	r31, 0xC1	; 193
 392:	cf 2e       	mov	r12, r31
 394:	f2 e0       	ldi	r31, 0x02	; 2
 396:	df 2e       	mov	r13, r31
 398:	f0 2d       	mov	r31, r0
 39a:	7e 01       	movw	r14, r28
		
		zufall2[i] = rand() % 125;	// bestimme neue LEDs
	}
	
	for(unsigned char i=0; i< 15; ++i){
		change(zufall2[i], 1);					// schalte neue LEDs an
 39c:	61 e0       	ldi	r22, 0x01	; 1
 39e:	89 91       	ld	r24, Y+
 3a0:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <change>
		zufall1[i] = zufall2[i];
 3a4:	f7 01       	movw	r30, r14
 3a6:	80 81       	ld	r24, Z
 3a8:	f8 01       	movw	r30, r16
 3aa:	81 93       	st	Z+, r24
 3ac:	8f 01       	movw	r16, r30
		change(zufall1[i], 0);			//schalte vorherige LEDs aus
		
		zufall2[i] = rand() % 125;	// bestimme neue LEDs
	}
	
	for(unsigned char i=0; i< 15; ++i){
 3ae:	cc 15       	cp	r28, r12
 3b0:	dd 05       	cpc	r29, r13
 3b2:	99 f7       	brne	.-26     	; 0x39a <ranranrandom+0x74>
		change(zufall2[i], 1);					// schalte neue LEDs an
		zufall1[i] = zufall2[i];
	}

	}
	slowr++;
 3b4:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <slowr>
 3b8:	8f 5f       	subi	r24, 0xFF	; 255
 3ba:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <slowr>
	
 3be:	df 91       	pop	r29
 3c0:	cf 91       	pop	r28
 3c2:	1f 91       	pop	r17
 3c4:	0f 91       	pop	r16
 3c6:	ff 90       	pop	r15
 3c8:	ef 90       	pop	r14
 3ca:	df 90       	pop	r13
 3cc:	cf 90       	pop	r12
 3ce:	bf 90       	pop	r11
 3d0:	af 90       	pop	r10
 3d2:	9f 90       	pop	r9
 3d4:	8f 90       	pop	r8
 3d6:	08 95       	ret

000003d8 <strandtest_mode>:
//deklaration der Variablen für die aktuelle LED, vergangene Zeit und Geschwindigkeit
unsigned char ledi = 0, stime = 0, speedmulti = 10;

//Drücken der Modustaste
void strandtest_mode() {
	speedmulti += 15;
 3d8:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <speedmulti>
 3dc:	81 5f       	subi	r24, 0xF1	; 241
 3de:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <speedmulti>
 3e2:	08 95       	ret

000003e4 <strandtest>:
}

//Ausgabe der Daten ins LED-Array
void strandtest() {
	if(stime > speedmulti) {
 3e4:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <stime>
 3e8:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <speedmulti>
 3ec:	98 17       	cp	r25, r24
 3ee:	b0 f4       	brcc	.+44     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
		led[ledi - 1] = 0;
 3f0:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <ledi>
 3f4:	e8 2f       	mov	r30, r24
 3f6:	f0 e0       	ldi	r31, 0x00	; 0
 3f8:	e0 5e       	subi	r30, 0xE0	; 224
 3fa:	fe 4f       	sbci	r31, 0xFE	; 254
 3fc:	df 01       	movw	r26, r30
 3fe:	11 97       	sbiw	r26, 0x01	; 1
 400:	1c 92       	st	X, r1
		led[ledi] = 1;
 402:	91 e0       	ldi	r25, 0x01	; 1
 404:	90 83       	st	Z, r25
		stime = 0;
 406:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <stime>
		ledi++;
 40a:	8f 5f       	subi	r24, 0xFF	; 255
		if(ledi == 126) {ledi = 0;}
 40c:	8e 37       	cpi	r24, 0x7E	; 126
 40e:	19 f0       	breq	.+6      	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
void strandtest() {
	if(stime > speedmulti) {
		led[ledi - 1] = 0;
		led[ledi] = 1;
		stime = 0;
		ledi++;
 410:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <ledi>
 414:	08 95       	ret
		if(ledi == 126) {ledi = 0;}
 416:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <ledi>
 41a:	08 95       	ret
		}else{stime++;}
 41c:	8f 5f       	subi	r24, 0xFF	; 255
 41e:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <stime>
 422:	08 95       	ret

00000424 <topbottom>:
//Variablen für aktuelle Schicht, Geschwindigkeit und Richtung
unsigned char curl = 0, slow = 0, slowcomp = 10;
char dir = 0;

//gibt Daten ins LED-Array aus
void topbottom() {
 424:	af 92       	push	r10
 426:	bf 92       	push	r11
 428:	df 92       	push	r13
 42a:	ef 92       	push	r14
 42c:	ff 92       	push	r15
 42e:	0f 93       	push	r16
 430:	1f 93       	push	r17
 432:	cf 93       	push	r28
 434:	df 93       	push	r29
		
		slow++;
 436:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <slow>
 43a:	8f 5f       	subi	r24, 0xFF	; 255
 43c:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <slow>
		
		if(slow == slowcomp) {
 440:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <slowcomp>
 444:	89 13       	cpse	r24, r25
 446:	81 c0       	rjmp	.+258    	; 0x54a <topbottom+0x126>
 448:	a0 e2       	ldi	r26, 0x20	; 32
 44a:	b1 e0       	ldi	r27, 0x01	; 1
 44c:	8d e9       	ldi	r24, 0x9D	; 157
 44e:	91 e0       	ldi	r25, 0x01	; 1
 450:	fd 01       	movw	r30, r26
			
			for(unsigned char i = 0; i < 125; i++) {
				led[i] = 0;
 452:	11 92       	st	Z+, r1
		
		slow++;
		
		if(slow == slowcomp) {
			
			for(unsigned char i = 0; i < 125; i++) {
 454:	e8 17       	cp	r30, r24
 456:	f9 07       	cpc	r31, r25
 458:	e1 f7       	brne	.-8      	; 0x452 <topbottom+0x2e>
 45a:	57 c0       	rjmp	.+174    	; 0x50a <topbottom+0xe6>
			
			//Bewegung nach oben
			if(dir == 0) {
				
				for(unsigned char i = 0; i < 25; i++) {
					led[i+ (curl*25)] = 1;
 45c:	e9 01       	movw	r28, r18
 45e:	59 93       	st	Y+, r21
 460:	9e 01       	movw	r18, r28
					
					if((curl+1) < 5) {
 462:	d5 e0       	ldi	r29, 0x05	; 5
 464:	ed 16       	cp	r14, r29
 466:	f1 04       	cpc	r15, r1
 468:	14 f4       	brge	.+4      	; 0x46e <topbottom+0x4a>
						led[i+ ((curl+1)*25)] = 2;
 46a:	e5 01       	movw	r28, r10
 46c:	48 83       	st	Y, r20
					}
					if((curl-1) >= 0) {
 46e:	77 23       	and	r23, r23
 470:	0c f0       	brlt	.+2      	; 0x474 <topbottom+0x50>
						led[i+ ((curl-1)*25)] = 2;
 472:	40 83       	st	Z, r20
 474:	31 96       	adiw	r30, 0x01	; 1
 476:	df ef       	ldi	r29, 0xFF	; 255
 478:	ad 1a       	sub	r10, r29
 47a:	bd 0a       	sbc	r11, r29
			}
			
			//Bewegung nach oben
			if(dir == 0) {
				
				for(unsigned char i = 0; i < 25; i++) {
 47c:	e0 17       	cp	r30, r16
 47e:	f1 07       	cpc	r31, r17
 480:	69 f7       	brne	.-38     	; 0x45c <topbottom+0x38>
						led[i+ ((curl-1)*25)] = 2;
					}

				}
				
				curl++;
 482:	21 e0       	ldi	r18, 0x01	; 1
 484:	2d 0d       	add	r18, r13
 486:	20 93 10 01 	sts	0x0110, r18	; 0x800110 <curl>
				
				if(curl == 5) {
 48a:	25 30       	cpi	r18, 0x05	; 5
 48c:	d9 f5       	brne	.+118    	; 0x504 <topbottom+0xe0>
					 dir = 1;
 48e:	21 e0       	ldi	r18, 0x01	; 1
 490:	20 93 0e 01 	sts	0x010E, r18	; 0x80010e <dir>
					 curl = 4;
 494:	24 e0       	ldi	r18, 0x04	; 4
 496:	20 93 10 01 	sts	0x0110, r18	; 0x800110 <curl>
 49a:	02 c0       	rjmp	.+4      	; 0x4a0 <topbottom+0x7c>
				}
			}
			
			//Bewegung nach unten
			if(dir == 1) {
 49c:	21 30       	cpi	r18, 0x01	; 1
 49e:	91 f5       	brne	.+100    	; 0x504 <topbottom+0xe0>
				
				for(unsigned char i = 0; i < 125; i++) {
					led[i] = 0;
 4a0:	1d 92       	st	X+, r1
			}
			
			//Bewegung nach unten
			if(dir == 1) {
				
				for(unsigned char i = 0; i < 125; i++) {
 4a2:	8a 17       	cp	r24, r26
 4a4:	9b 07       	cpc	r25, r27
 4a6:	e1 f7       	brne	.-8      	; 0x4a0 <topbottom+0x7c>
					led[i] = 0;
				}
				
				for(unsigned char i = 0; i < 25; i++) {
					led[i+ (curl*25)] = 1;
 4a8:	10 91 10 01 	lds	r17, 0x0110	; 0x800110 <curl>
 4ac:	21 2f       	mov	r18, r17
 4ae:	30 e0       	ldi	r19, 0x00	; 0
 4b0:	49 e1       	ldi	r20, 0x19	; 25
 4b2:	14 9f       	mul	r17, r20
 4b4:	d0 01       	movw	r26, r0
 4b6:	11 24       	eor	r1, r1
					
					if((curl+1) < 5) {
 4b8:	b9 01       	movw	r22, r18
 4ba:	6f 5f       	subi	r22, 0xFF	; 255
 4bc:	7f 4f       	sbci	r23, 0xFF	; 255
						led[i+ ((curl+1)*25)] = 2;
					}
					if((curl-1) >= 0) {
 4be:	21 50       	subi	r18, 0x01	; 1
 4c0:	31 09       	sbc	r19, r1
 4c2:	ed 01       	movw	r28, r26
 4c4:	c0 5e       	subi	r28, 0xE0	; 224
 4c6:	de 4f       	sbci	r29, 0xFE	; 254
 4c8:	fd 01       	movw	r30, r26
 4ca:	e9 5f       	subi	r30, 0xF9	; 249
 4cc:	fe 4f       	sbci	r31, 0xFE	; 254
 4ce:	a7 5c       	subi	r26, 0xC7	; 199
 4d0:	be 4f       	sbci	r27, 0xFE	; 254
 4d2:	ae 01       	movw	r20, r28
				for(unsigned char i = 0; i < 125; i++) {
					led[i] = 0;
				}
				
				for(unsigned char i = 0; i < 25; i++) {
					led[i+ (curl*25)] = 1;
 4d4:	91 e0       	ldi	r25, 0x01	; 1
					
					if((curl+1) < 5) {
						led[i+ ((curl+1)*25)] = 2;
 4d6:	82 e0       	ldi	r24, 0x02	; 2
				for(unsigned char i = 0; i < 125; i++) {
					led[i] = 0;
				}
				
				for(unsigned char i = 0; i < 25; i++) {
					led[i+ (curl*25)] = 1;
 4d8:	99 93       	st	Y+, r25
					
					if((curl+1) < 5) {
 4da:	65 30       	cpi	r22, 0x05	; 5
 4dc:	71 05       	cpc	r23, r1
 4de:	0c f4       	brge	.+2      	; 0x4e2 <topbottom+0xbe>
						led[i+ ((curl+1)*25)] = 2;
 4e0:	8c 93       	st	X, r24
					}
					if((curl-1) >= 0) {
 4e2:	33 23       	and	r19, r19
 4e4:	0c f0       	brlt	.+2      	; 0x4e8 <topbottom+0xc4>
						led[i+ ((curl-1)*25)] = 2;
 4e6:	80 83       	st	Z, r24
 4e8:	31 96       	adiw	r30, 0x01	; 1
 4ea:	11 96       	adiw	r26, 0x01	; 1
				
				for(unsigned char i = 0; i < 125; i++) {
					led[i] = 0;
				}
				
				for(unsigned char i = 0; i < 25; i++) {
 4ec:	e4 17       	cp	r30, r20
 4ee:	f5 07       	cpc	r31, r21
 4f0:	99 f7       	brne	.-26     	; 0x4d8 <topbottom+0xb4>
					if((curl-1) >= 0) {
						led[i+ ((curl-1)*25)] = 2;
					}
				}
				
				curl--;
 4f2:	11 50       	subi	r17, 0x01	; 1
 4f4:	10 93 10 01 	sts	0x0110, r17	; 0x800110 <curl>
				
				if(curl == 0) {
 4f8:	11 11       	cpse	r17, r1
 4fa:	04 c0       	rjmp	.+8      	; 0x504 <topbottom+0xe0>
					dir = 0;
 4fc:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <dir>
					curl = 0;
 500:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <curl>
				}
			}
			
			slow = 0;
 504:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <slow>
		}
		
}
 508:	20 c0       	rjmp	.+64     	; 0x54a <topbottom+0x126>
			for(unsigned char i = 0; i < 125; i++) {
				led[i] = 0;
			}
			
			//Bewegung nach oben
			if(dir == 0) {
 50a:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <dir>
 50e:	21 11       	cpse	r18, r1
 510:	c5 cf       	rjmp	.-118    	; 0x49c <topbottom+0x78>
				
				for(unsigned char i = 0; i < 25; i++) {
					led[i+ (curl*25)] = 1;
 512:	d0 90 10 01 	lds	r13, 0x0110	; 0x800110 <curl>
 516:	6d 2d       	mov	r22, r13
 518:	70 e0       	ldi	r23, 0x00	; 0
 51a:	59 e1       	ldi	r21, 0x19	; 25
 51c:	d5 9e       	mul	r13, r21
 51e:	e0 01       	movw	r28, r0
 520:	11 24       	eor	r1, r1
					
					if((curl+1) < 5) {
 522:	7b 01       	movw	r14, r22
 524:	2f ef       	ldi	r18, 0xFF	; 255
 526:	e2 1a       	sub	r14, r18
 528:	f2 0a       	sbc	r15, r18
						led[i+ ((curl+1)*25)] = 2;
					}
					if((curl-1) >= 0) {
 52a:	61 50       	subi	r22, 0x01	; 1
 52c:	71 09       	sbc	r23, r1
 52e:	9e 01       	movw	r18, r28
 530:	20 5e       	subi	r18, 0xE0	; 224
 532:	3e 4f       	sbci	r19, 0xFE	; 254
 534:	fe 01       	movw	r30, r28
 536:	e9 5f       	subi	r30, 0xF9	; 249
 538:	fe 4f       	sbci	r31, 0xFE	; 254
 53a:	ae 01       	movw	r20, r28
 53c:	47 5c       	subi	r20, 0xC7	; 199
 53e:	5e 4f       	sbci	r21, 0xFE	; 254
 540:	5a 01       	movw	r10, r20
 542:	89 01       	movw	r16, r18
			
			//Bewegung nach oben
			if(dir == 0) {
				
				for(unsigned char i = 0; i < 25; i++) {
					led[i+ (curl*25)] = 1;
 544:	51 e0       	ldi	r21, 0x01	; 1
					
					if((curl+1) < 5) {
						led[i+ ((curl+1)*25)] = 2;
 546:	42 e0       	ldi	r20, 0x02	; 2
 548:	89 cf       	rjmp	.-238    	; 0x45c <topbottom+0x38>
			}
			
			slow = 0;
		}
		
}
 54a:	df 91       	pop	r29
 54c:	cf 91       	pop	r28
 54e:	1f 91       	pop	r17
 550:	0f 91       	pop	r16
 552:	ff 90       	pop	r15
 554:	ef 90       	pop	r14
 556:	df 90       	pop	r13
 558:	bf 90       	pop	r11
 55a:	af 90       	pop	r10
 55c:	08 95       	ret

0000055e <topbottom_mode>:

//Drücken der Modustaste
void topbottom_mode() {
	slowcomp += 10;
 55e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <slowcomp>
 562:	86 5f       	subi	r24, 0xF6	; 246
 564:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <slowcomp>
 568:	08 95       	ret

0000056a <getMode>:
unsigned char get100msflag() {
	if(t100msflag == 1) {
		t100msflag = 0;
		return 1;
	}else { return 0;}
}
 56a:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <MODE>
 56e:	08 95       	ret

00000570 <initbtn>:
//Aufgerufene Funktionen: keine
//Zurückgegebene Werte	: keine
//----------------------------------------------------------------------------------------------
void initbtn() {
	//Pullup auf Buttons aktivieren
	PORTD = 0xff;	
 570:	8f ef       	ldi	r24, 0xFF	; 255
 572:	8b b9       	out	0x0b, r24	; 11
 574:	08 95       	ret

00000576 <getModeChange>:
//Wertet Knopfdrücke aus und ändert die Modusvariable
//Aufgerufene Funktionen: keine
//Zurückgegebene Werte	: keine
//----------------------------------------------------------------------------------------------
void getModeChange() {
	if(specialState == 1) {
 576:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <specialState>
 57a:	81 30       	cpi	r24, 0x01	; 1
 57c:	11 f4       	brne	.+4      	; 0x582 <getModeChange+0xc>
		specialState = 0;
 57e:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <specialState>
		//TODO: USB TTL Mode
	}
	if(run2 == 1) {
 582:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <run2>
 586:	81 30       	cpi	r24, 0x01	; 1
 588:	21 f4       	brne	.+8      	; 0x592 <getModeChange+0x1c>
		modeswitch();
 58a:	0e 94 93 00 	call	0x126	; 0x126 <modeswitch>
		run2 = 0;
 58e:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <run2>
	} 
	if(run1 == 1) {
 592:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <run1>
 596:	81 30       	cpi	r24, 0x01	; 1
 598:	69 f4       	brne	.+26     	; 0x5b4 <getModeChange+0x3e>
		MODE++;
 59a:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <MODE>
 59e:	8f 5f       	subi	r24, 0xFF	; 255
		if(MODE > maxmode) {
 5a0:	86 30       	cpi	r24, 0x06	; 6
 5a2:	18 f4       	brcc	.+6      	; 0x5aa <getModeChange+0x34>
	if(run2 == 1) {
		modeswitch();
		run2 = 0;
	} 
	if(run1 == 1) {
		MODE++;
 5a4:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <MODE>
 5a8:	03 c0       	rjmp	.+6      	; 0x5b0 <getModeChange+0x3a>
		if(MODE > maxmode) {
			MODE = 1;
 5aa:	81 e0       	ldi	r24, 0x01	; 1
 5ac:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <MODE>
		}
		run1 = 0;
 5b0:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <run1>
	}
	if(run3 == 1) {
 5b4:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <run3>
 5b8:	81 30       	cpi	r24, 0x01	; 1
 5ba:	61 f4       	brne	.+24     	; 0x5d4 <getModeChange+0x5e>
		MODE--;	
 5bc:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <MODE>
 5c0:	81 50       	subi	r24, 0x01	; 1
		if(MODE < 1) {
 5c2:	19 f0       	breq	.+6      	; 0x5ca <getModeChange+0x54>
			MODE = 1;
		}
		run1 = 0;
	}
	if(run3 == 1) {
		MODE--;	
 5c4:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <MODE>
 5c8:	03 c0       	rjmp	.+6      	; 0x5d0 <getModeChange+0x5a>
		if(MODE < 1) {
			MODE = maxmode;
 5ca:	85 e0       	ldi	r24, 0x05	; 5
 5cc:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <MODE>
		}
		run3 = 0;
 5d0:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <run3>
 5d4:	08 95       	ret

000005d6 <getRunFlags>:
//Aufgerufene Funktionen: keine
//Zurückgegebene Werte	: keine
//----------------------------------------------------------------------------------------------
void getRunFlags() {
		//check button 3
		if (!(PIND & (1<<PD2))) {
 5d6:	4a 99       	sbic	0x09, 2	; 9
 5d8:	0e c0       	rjmp	.+28     	; 0x5f6 <getRunFlags+0x20>
			if(last3 == 0) {
 5da:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <last3>
 5de:	81 11       	cpse	r24, r1
 5e0:	10 c0       	rjmp	.+32     	; 0x602 <getRunFlags+0x2c>
				run3 = 1;
 5e2:	81 e0       	ldi	r24, 0x01	; 1
 5e4:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <run3>
				last3 = 1;
 5e8:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <last3>
				//check for combination
				if (!(PIND & (1<<PD5))) {
 5ec:	4d 99       	sbic	0x09, 5	; 9
 5ee:	09 c0       	rjmp	.+18     	; 0x602 <getRunFlags+0x2c>
					specialState = 1;
 5f0:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <specialState>
 5f4:	06 c0       	rjmp	.+12     	; 0x602 <getRunFlags+0x2c>
				}
			}
			}else if(last3 == 1) {
 5f6:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <last3>
 5fa:	81 30       	cpi	r24, 0x01	; 1
 5fc:	11 f4       	brne	.+4      	; 0x602 <getRunFlags+0x2c>
			last3 = 0;
 5fe:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <last3>
		}
		//check button 1
		if (!(PIND & (1<<PD5))) {
 602:	4d 99       	sbic	0x09, 5	; 9
 604:	0e c0       	rjmp	.+28     	; 0x622 <getRunFlags+0x4c>
			if(last1 == 0) {
 606:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <last1>
 60a:	81 11       	cpse	r24, r1
 60c:	10 c0       	rjmp	.+32     	; 0x62e <getRunFlags+0x58>
				run1 = 1;
 60e:	81 e0       	ldi	r24, 0x01	; 1
 610:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <run1>
				last1 = 1;
 614:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <last1>
				//check for combination
				if (!(PIND & (1<<PD2))) {
 618:	4a 99       	sbic	0x09, 2	; 9
 61a:	09 c0       	rjmp	.+18     	; 0x62e <getRunFlags+0x58>
					specialState = 1;
 61c:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <specialState>
 620:	06 c0       	rjmp	.+12     	; 0x62e <getRunFlags+0x58>
				}
			}
			}else if(last1 == 1) {
 622:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <last1>
 626:	81 30       	cpi	r24, 0x01	; 1
 628:	11 f4       	brne	.+4      	; 0x62e <getRunFlags+0x58>
			last1 = 0;
 62a:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <last1>
		}
		//check button 2
		if (!(PIND & (1<<PD3))) {
 62e:	4b 99       	sbic	0x09, 3	; 9
 630:	2e c0       	rjmp	.+92     	; 0x68e <getRunFlags+0xb8>
			if(last2 == 0) {
 632:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <last2>
 636:	81 11       	cpse	r24, r1
 638:	05 c0       	rjmp	.+10     	; 0x644 <getRunFlags+0x6e>
				run2 = 1;
 63a:	81 e0       	ldi	r24, 0x01	; 1
 63c:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <run2>
				last2 = 1;
 640:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <last2>
			}
			sleepTime++;
 644:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <sleepTime>
 648:	8f 5f       	subi	r24, 0xFF	; 255
 64a:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <sleepTime>
			
			if(sleepTime == 15) {
 64e:	8f 30       	cpi	r24, 0x0F	; 15
 650:	31 f5       	brne	.+76     	; 0x69e <getRunFlags+0xc8>
				EIMSK |= (1<<INT1);
 652:	e9 9a       	sbi	0x1d, 1	; 29
				EICRA |= (1<<ISC11);
 654:	e9 e6       	ldi	r30, 0x69	; 105
 656:	f0 e0       	ldi	r31, 0x00	; 0
 658:	80 81       	ld	r24, Z
 65a:	88 60       	ori	r24, 0x08	; 8
 65c:	80 83       	st	Z, r24
				TIMSK0 &= ~(1<<OCIE0A);
 65e:	ee e6       	ldi	r30, 0x6E	; 110
 660:	f0 e0       	ldi	r31, 0x00	; 0
 662:	80 81       	ld	r24, Z
 664:	8d 7f       	andi	r24, 0xFD	; 253
 666:	80 83       	st	Z, r24
				
				//clear LEDs
				SPI_Send(0x00);
 668:	80 e0       	ldi	r24, 0x00	; 0
 66a:	0e 94 f3 06 	call	0xde6	; 0xde6 <SPI_Send>
				SPI_Send(0x00);
 66e:	80 e0       	ldi	r24, 0x00	; 0
 670:	0e 94 f3 06 	call	0xde6	; 0xde6 <SPI_Send>
				SPI_Send(0x00);
 674:	80 e0       	ldi	r24, 0x00	; 0
 676:	0e 94 f3 06 	call	0xde6	; 0xde6 <SPI_Send>
				SPI_Send(0x00);
 67a:	80 e0       	ldi	r24, 0x00	; 0
 67c:	0e 94 f3 06 	call	0xde6	; 0xde6 <SPI_Send>
				//Latch upper Chip
				PORTD |= (1<<PD7);
 680:	5f 9a       	sbi	0x0b, 7	; 11
				PORTD &= ~(1<<PD7);
 682:	5f 98       	cbi	0x0b, 7	; 11
				
				//schalte Layer aus
				PORTC = 0x00;
 684:	18 b8       	out	0x08, r1	; 8
				
				set_sleep_mode(SLEEP_MODE_EXT_STANDBY);
 686:	83 b7       	in	r24, 0x33	; 51
 688:	8e 60       	ori	r24, 0x0E	; 14
 68a:	83 bf       	out	0x33, r24	; 51
 68c:	08 95       	ret
				
			}
			
			}else if(last2 == 1) {
 68e:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <last2>
 692:	81 30       	cpi	r24, 0x01	; 1
 694:	21 f4       	brne	.+8      	; 0x69e <getRunFlags+0xc8>
			last2 = 0;
 696:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <last2>
			sleepTime = 0;
 69a:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <sleepTime>
 69e:	08 95       	ret

000006a0 <getBtn>:
//Knöpfe einlesen + modi ändern 
//Aufgerufene Funktionen: keine
//Zurückgegebene Werte	: keine
//----------------------------------------------------------------------------------------------
void getBtn() {
	getRunFlags();
 6a0:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <getRunFlags>
	getModeChange();
 6a4:	0e 94 bb 02 	call	0x576	; 0x576 <getModeChange>
	t100msflag = 1;
 6a8:	81 e0       	ldi	r24, 0x01	; 1
 6aa:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <t100msflag>
 6ae:	08 95       	ret

000006b0 <__vector_2>:
//Funktion: ISR
//Aufwecken aus dem Schlafmodus
//Aufgerufene Funktionen: keine
//Zurückgegebene Werte	: keine
//----------------------------------------------------------------------------------------------
ISR(INT1_vect) {
 6b0:	1f 92       	push	r1
 6b2:	0f 92       	push	r0
 6b4:	0f b6       	in	r0, 0x3f	; 63
 6b6:	0f 92       	push	r0
 6b8:	11 24       	eor	r1, r1
 6ba:	8f 93       	push	r24
 6bc:	9f 93       	push	r25
 6be:	ef 93       	push	r30
 6c0:	ff 93       	push	r31
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 6c2:	8f e1       	ldi	r24, 0x1F	; 31
 6c4:	9e e4       	ldi	r25, 0x4E	; 78
 6c6:	01 97       	sbiw	r24, 0x01	; 1
 6c8:	f1 f7       	brne	.-4      	; 0x6c6 <__vector_2+0x16>
 6ca:	00 c0       	rjmp	.+0      	; 0x6cc <__vector_2+0x1c>
 6cc:	00 00       	nop
	_delay_ms(5);
	if (!(PIND & (1<<PD3))) {
 6ce:	4b 99       	sbic	0x09, 3	; 9
 6d0:	05 c0       	rjmp	.+10     	; 0x6dc <__vector_2+0x2c>
		TIMSK0 |= (1<<OCIE0A);
 6d2:	ee e6       	ldi	r30, 0x6E	; 110
 6d4:	f0 e0       	ldi	r31, 0x00	; 0
 6d6:	80 81       	ld	r24, Z
 6d8:	82 60       	ori	r24, 0x02	; 2
 6da:	80 83       	st	Z, r24
	}
}
 6dc:	ff 91       	pop	r31
 6de:	ef 91       	pop	r30
 6e0:	9f 91       	pop	r25
 6e2:	8f 91       	pop	r24
 6e4:	0f 90       	pop	r0
 6e6:	0f be       	out	0x3f, r0	; 63
 6e8:	0f 90       	pop	r0
 6ea:	1f 90       	pop	r1
 6ec:	18 95       	reti

000006ee <initLEDtimer>:
//Aufgerufene Funktionen: keine
//Zurückgegebene Werte	: keine
//----------------------------------------------------------------------------------------------
void initLEDtimer(void) {
	//CTC Modus Timer O C1
	TCCR0A |= (1<<WGM01);
 6ee:	84 b5       	in	r24, 0x24	; 36
 6f0:	82 60       	ori	r24, 0x02	; 2
 6f2:	84 bd       	out	0x24, r24	; 36
	//Vorteiler auf 64
	TCCR0B |= (1<<CS01)|(1<<CS00);
 6f4:	85 b5       	in	r24, 0x25	; 37
 6f6:	83 60       	ori	r24, 0x03	; 3
 6f8:	85 bd       	out	0x25, r24	; 37
	// Aktiviere OCIEA
	TIMSK0 |= (1<<OCIE0A);
 6fa:	ee e6       	ldi	r30, 0x6E	; 110
 6fc:	f0 e0       	ldi	r31, 0x00	; 0
 6fe:	80 81       	ld	r24, Z
 700:	82 60       	ori	r24, 0x02	; 2
 702:	80 83       	st	Z, r24
	//etwa alle 10ms
	OCR0A = 180;
 704:	84 eb       	ldi	r24, 0xB4	; 180
 706:	87 bd       	out	0x27, r24	; 39
 708:	08 95       	ret

0000070a <get10msflag>:
//Gibt die timing-flag für die Animationen zurück
//Aufgerufene Funktionen: keine
//Zurückgegebene Werte	: 1 oder 0, je nachdem ob 10ms vergangen sind
//----------------------------------------------------------------------------------------------
unsigned char get10msflag() {
	if(t10msflag == 1) {
 70a:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <t10msflag>
 70e:	81 30       	cpi	r24, 0x01	; 1
 710:	19 f4       	brne	.+6      	; 0x718 <get10msflag+0xe>
		t10msflag = 0;
 712:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <t10msflag>
		return 1;
 716:	08 95       	ret
		}else { return 0;}
 718:	80 e0       	ldi	r24, 0x00	; 0
 	}
 71a:	08 95       	ret

0000071c <get100msbflag>:
//Gibt die timing-flag für die Knopfabfrage zurück
//Aufgerufene Funktionen: keine
//Zurückgegebene Werte	: 1 oder 0, je nachdem ob halbwegs 100ms vergangen sind
//----------------------------------------------------------------------------------------------
unsigned char get100msbflag() {
	if(t10msbflag == 1) {
 71c:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <t10msbflag>
 720:	81 30       	cpi	r24, 0x01	; 1
 722:	19 f4       	brne	.+6      	; 0x72a <get100msbflag+0xe>
		t10msbflag = 0;
 724:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <t10msbflag>
		return 1;
 728:	08 95       	ret
		}else { return 0;}
 72a:	80 e0       	ldi	r24, 0x00	; 0
	}
 72c:	08 95       	ret

0000072e <convertArrayToBitmask>:
//Funktion: convertArrayToBitmask
//Konvertiert die Werte aus dem LED-Array in Bitmasken für die LED-Treiber
//Aufgerufene Funktionen: keine
//Zurückgegebene Werte	: keine
//----------------------------------------------------------------------------------------------
void convertArrayToBitmask(unsigned char l) {
 72e:	3f 92       	push	r3
 730:	4f 92       	push	r4
 732:	5f 92       	push	r5
 734:	6f 92       	push	r6
 736:	7f 92       	push	r7
 738:	8f 92       	push	r8
 73a:	9f 92       	push	r9
 73c:	af 92       	push	r10
 73e:	bf 92       	push	r11
 740:	cf 92       	push	r12
 742:	df 92       	push	r13
 744:	ef 92       	push	r14
 746:	ff 92       	push	r15
 748:	0f 93       	push	r16
 74a:	1f 93       	push	r17
 74c:	cf 93       	push	r28
 74e:	df 93       	push	r29
	
	MAXData11 = 0x00;
 750:	10 92 c2 02 	sts	0x02C2, r1	; 0x8002c2 <MAXData11>
	MAXData12 = 0x00;
 754:	10 92 c4 02 	sts	0x02C4, r1	; 0x8002c4 <MAXData12>
	MAXData21 = 0x00;
 758:	10 92 c1 02 	sts	0x02C1, r1	; 0x8002c1 <MAXData21>
	MAXData22 = 0x00;
 75c:	10 92 c3 02 	sts	0x02C3, r1	; 0x8002c3 <MAXData22>
	switch(l) {
 760:	82 30       	cpi	r24, 0x02	; 2
 762:	91 f0       	breq	.+36     	; 0x788 <convertArrayToBitmask+0x5a>
 764:	28 f4       	brcc	.+10     	; 0x770 <convertArrayToBitmask+0x42>
 766:	88 23       	and	r24, r24
 768:	41 f0       	breq	.+16     	; 0x77a <convertArrayToBitmask+0x4c>
 76a:	81 30       	cpi	r24, 0x01	; 1
 76c:	49 f0       	breq	.+18     	; 0x780 <convertArrayToBitmask+0x52>
 76e:	17 c0       	rjmp	.+46     	; 0x79e <convertArrayToBitmask+0x70>
 770:	83 30       	cpi	r24, 0x03	; 3
 772:	71 f0       	breq	.+28     	; 0x790 <convertArrayToBitmask+0x62>
 774:	84 30       	cpi	r24, 0x04	; 4
 776:	81 f0       	breq	.+32     	; 0x798 <convertArrayToBitmask+0x6a>
 778:	12 c0       	rjmp	.+36     	; 0x79e <convertArrayToBitmask+0x70>
		
		case 0: offset = 0;	
 77a:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <offset>
			break;
 77e:	0f c0       	rjmp	.+30     	; 0x79e <convertArrayToBitmask+0x70>
		
		case 1: offset = 25;
 780:	89 e1       	ldi	r24, 0x19	; 25
 782:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <offset>
			break;
 786:	0b c0       	rjmp	.+22     	; 0x79e <convertArrayToBitmask+0x70>
			
		case 2: offset = 50;
 788:	82 e3       	ldi	r24, 0x32	; 50
 78a:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <offset>
			break;
 78e:	07 c0       	rjmp	.+14     	; 0x79e <convertArrayToBitmask+0x70>
			
		case 3: offset = 75;
 790:	8b e4       	ldi	r24, 0x4B	; 75
 792:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <offset>
			break;
 796:	03 c0       	rjmp	.+6      	; 0x79e <convertArrayToBitmask+0x70>
			
		case 4: offset = 100;
 798:	84 e6       	ldi	r24, 0x64	; 100
 79a:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <offset>
			break;
		
	}
	if(led[0 + offset] == 1) {MAXData21 |= 1<<0;}
 79e:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <offset>
 7a2:	90 e0       	ldi	r25, 0x00	; 0
 7a4:	fc 01       	movw	r30, r24
 7a6:	e0 5e       	subi	r30, 0xE0	; 224
 7a8:	fe 4f       	sbci	r31, 0xFE	; 254
 7aa:	d0 81       	ld	r29, Z
 7ac:	d1 30       	cpi	r29, 0x01	; 1
 7ae:	19 f4       	brne	.+6      	; 0x7b6 <convertArrayToBitmask+0x88>
 7b0:	21 e0       	ldi	r18, 0x01	; 1
 7b2:	20 93 c1 02 	sts	0x02C1, r18	; 0x8002c1 <MAXData21>
	if(led[1 + offset] == 1) {MAXData22 |= 1<<7;}
 7b6:	fc 01       	movw	r30, r24
 7b8:	e0 5e       	subi	r30, 0xE0	; 224
 7ba:	fe 4f       	sbci	r31, 0xFE	; 254
 7bc:	c1 81       	ldd	r28, Z+1	; 0x01
 7be:	c1 30       	cpi	r28, 0x01	; 1
 7c0:	19 f4       	brne	.+6      	; 0x7c8 <convertArrayToBitmask+0x9a>
 7c2:	20 e8       	ldi	r18, 0x80	; 128
 7c4:	20 93 c3 02 	sts	0x02C3, r18	; 0x8002c3 <MAXData22>
	if(led[2 + offset] == 1) {MAXData22 |= 1<<6;}
 7c8:	fc 01       	movw	r30, r24
 7ca:	e0 5e       	subi	r30, 0xE0	; 224
 7cc:	fe 4f       	sbci	r31, 0xFE	; 254
 7ce:	b2 81       	ldd	r27, Z+2	; 0x02
 7d0:	b1 30       	cpi	r27, 0x01	; 1
 7d2:	29 f4       	brne	.+10     	; 0x7de <convertArrayToBitmask+0xb0>
 7d4:	20 91 c3 02 	lds	r18, 0x02C3	; 0x8002c3 <MAXData22>
 7d8:	20 64       	ori	r18, 0x40	; 64
 7da:	20 93 c3 02 	sts	0x02C3, r18	; 0x8002c3 <MAXData22>
	if(led[3 + offset] == 1) {MAXData22 |= 1<<5;}
 7de:	fc 01       	movw	r30, r24
 7e0:	e0 5e       	subi	r30, 0xE0	; 224
 7e2:	fe 4f       	sbci	r31, 0xFE	; 254
 7e4:	a3 81       	ldd	r26, Z+3	; 0x03
 7e6:	a1 30       	cpi	r26, 0x01	; 1
 7e8:	29 f4       	brne	.+10     	; 0x7f4 <convertArrayToBitmask+0xc6>
 7ea:	20 91 c3 02 	lds	r18, 0x02C3	; 0x8002c3 <MAXData22>
 7ee:	20 62       	ori	r18, 0x20	; 32
 7f0:	20 93 c3 02 	sts	0x02C3, r18	; 0x8002c3 <MAXData22>
	if(led[4 + offset] == 1) {MAXData22 |= 1<<4;}
 7f4:	fc 01       	movw	r30, r24
 7f6:	e0 5e       	subi	r30, 0xE0	; 224
 7f8:	fe 4f       	sbci	r31, 0xFE	; 254
 7fa:	44 80       	ldd	r4, Z+4	; 0x04
 7fc:	21 e0       	ldi	r18, 0x01	; 1
 7fe:	42 12       	cpse	r4, r18
 800:	05 c0       	rjmp	.+10     	; 0x80c <convertArrayToBitmask+0xde>
 802:	20 91 c3 02 	lds	r18, 0x02C3	; 0x8002c3 <MAXData22>
 806:	20 61       	ori	r18, 0x10	; 16
 808:	20 93 c3 02 	sts	0x02C3, r18	; 0x8002c3 <MAXData22>
	if(led[5 + offset] == 1) {MAXData22 |= 1<<3;}
 80c:	9c 01       	movw	r18, r24
 80e:	20 5e       	subi	r18, 0xE0	; 224
 810:	3e 4f       	sbci	r19, 0xFE	; 254
 812:	f9 01       	movw	r30, r18
 814:	35 80       	ldd	r3, Z+5	; 0x05
 816:	f1 e0       	ldi	r31, 0x01	; 1
 818:	3f 12       	cpse	r3, r31
 81a:	05 c0       	rjmp	.+10     	; 0x826 <convertArrayToBitmask+0xf8>
 81c:	20 91 c3 02 	lds	r18, 0x02C3	; 0x8002c3 <MAXData22>
 820:	28 60       	ori	r18, 0x08	; 8
 822:	20 93 c3 02 	sts	0x02C3, r18	; 0x8002c3 <MAXData22>
	if(led[6 + offset] == 1) {MAXData22 |= 1<<2;}
 826:	9c 01       	movw	r18, r24
 828:	20 5e       	subi	r18, 0xE0	; 224
 82a:	3e 4f       	sbci	r19, 0xFE	; 254
 82c:	f9 01       	movw	r30, r18
 82e:	76 81       	ldd	r23, Z+6	; 0x06
 830:	71 30       	cpi	r23, 0x01	; 1
 832:	29 f4       	brne	.+10     	; 0x83e <convertArrayToBitmask+0x110>
 834:	20 91 c3 02 	lds	r18, 0x02C3	; 0x8002c3 <MAXData22>
 838:	24 60       	ori	r18, 0x04	; 4
 83a:	20 93 c3 02 	sts	0x02C3, r18	; 0x8002c3 <MAXData22>
	if(led[7 + offset] == 1) {MAXData22 |= 1<<1;}
 83e:	9c 01       	movw	r18, r24
 840:	20 5e       	subi	r18, 0xE0	; 224
 842:	3e 4f       	sbci	r19, 0xFE	; 254
 844:	f9 01       	movw	r30, r18
 846:	67 81       	ldd	r22, Z+7	; 0x07
 848:	61 30       	cpi	r22, 0x01	; 1
 84a:	29 f4       	brne	.+10     	; 0x856 <convertArrayToBitmask+0x128>
 84c:	20 91 c3 02 	lds	r18, 0x02C3	; 0x8002c3 <MAXData22>
 850:	22 60       	ori	r18, 0x02	; 2
 852:	20 93 c3 02 	sts	0x02C3, r18	; 0x8002c3 <MAXData22>
	if(led[8 + offset] == 1) {MAXData22 |= 1<<0;}
 856:	9c 01       	movw	r18, r24
 858:	20 5e       	subi	r18, 0xE0	; 224
 85a:	3e 4f       	sbci	r19, 0xFE	; 254
 85c:	f9 01       	movw	r30, r18
 85e:	50 85       	ldd	r21, Z+8	; 0x08
 860:	51 30       	cpi	r21, 0x01	; 1
 862:	29 f4       	brne	.+10     	; 0x86e <convertArrayToBitmask+0x140>
 864:	20 91 c3 02 	lds	r18, 0x02C3	; 0x8002c3 <MAXData22>
 868:	21 60       	ori	r18, 0x01	; 1
 86a:	20 93 c3 02 	sts	0x02C3, r18	; 0x8002c3 <MAXData22>
	if(led[9 + offset] == 1) {MAXData11 |= 1<<7;}
 86e:	9c 01       	movw	r18, r24
 870:	20 5e       	subi	r18, 0xE0	; 224
 872:	3e 4f       	sbci	r19, 0xFE	; 254
 874:	f9 01       	movw	r30, r18
 876:	41 85       	ldd	r20, Z+9	; 0x09
 878:	41 30       	cpi	r20, 0x01	; 1
 87a:	19 f4       	brne	.+6      	; 0x882 <convertArrayToBitmask+0x154>
 87c:	20 e8       	ldi	r18, 0x80	; 128
 87e:	20 93 c2 02 	sts	0x02C2, r18	; 0x8002c2 <MAXData11>
	if(led[10 + offset] == 1) {MAXData11 |= 1<<6;}
 882:	9c 01       	movw	r18, r24
 884:	20 5e       	subi	r18, 0xE0	; 224
 886:	3e 4f       	sbci	r19, 0xFE	; 254
 888:	f9 01       	movw	r30, r18
 88a:	32 85       	ldd	r19, Z+10	; 0x0a
 88c:	31 30       	cpi	r19, 0x01	; 1
 88e:	29 f4       	brne	.+10     	; 0x89a <convertArrayToBitmask+0x16c>
 890:	20 91 c2 02 	lds	r18, 0x02C2	; 0x8002c2 <MAXData11>
 894:	20 64       	ori	r18, 0x40	; 64
 896:	20 93 c2 02 	sts	0x02C2, r18	; 0x8002c2 <MAXData11>
	if(led[11 + offset] == 1) {MAXData11 |= 1<<5;}
 89a:	8c 01       	movw	r16, r24
 89c:	00 5e       	subi	r16, 0xE0	; 224
 89e:	1e 4f       	sbci	r17, 0xFE	; 254
 8a0:	f8 01       	movw	r30, r16
 8a2:	23 85       	ldd	r18, Z+11	; 0x0b
 8a4:	21 30       	cpi	r18, 0x01	; 1
 8a6:	29 f4       	brne	.+10     	; 0x8b2 <convertArrayToBitmask+0x184>
 8a8:	10 91 c2 02 	lds	r17, 0x02C2	; 0x8002c2 <MAXData11>
 8ac:	10 62       	ori	r17, 0x20	; 32
 8ae:	10 93 c2 02 	sts	0x02C2, r17	; 0x8002c2 <MAXData11>
	if(led[12 + offset] == 1) {MAXData11 |= 1<<4;}
 8b2:	8c 01       	movw	r16, r24
 8b4:	00 5e       	subi	r16, 0xE0	; 224
 8b6:	1e 4f       	sbci	r17, 0xFE	; 254
 8b8:	f8 01       	movw	r30, r16
 8ba:	f4 84       	ldd	r15, Z+12	; 0x0c
 8bc:	f1 e0       	ldi	r31, 0x01	; 1
 8be:	ff 12       	cpse	r15, r31
 8c0:	05 c0       	rjmp	.+10     	; 0x8cc <convertArrayToBitmask+0x19e>
 8c2:	10 91 c2 02 	lds	r17, 0x02C2	; 0x8002c2 <MAXData11>
 8c6:	10 61       	ori	r17, 0x10	; 16
 8c8:	10 93 c2 02 	sts	0x02C2, r17	; 0x8002c2 <MAXData11>
	if(led[13 + offset] == 1) {MAXData11 |= 1<<3;}
 8cc:	8c 01       	movw	r16, r24
 8ce:	00 5e       	subi	r16, 0xE0	; 224
 8d0:	1e 4f       	sbci	r17, 0xFE	; 254
 8d2:	f8 01       	movw	r30, r16
 8d4:	e5 84       	ldd	r14, Z+13	; 0x0d
 8d6:	f1 e0       	ldi	r31, 0x01	; 1
 8d8:	ef 12       	cpse	r14, r31
 8da:	05 c0       	rjmp	.+10     	; 0x8e6 <convertArrayToBitmask+0x1b8>
 8dc:	10 91 c2 02 	lds	r17, 0x02C2	; 0x8002c2 <MAXData11>
 8e0:	18 60       	ori	r17, 0x08	; 8
 8e2:	10 93 c2 02 	sts	0x02C2, r17	; 0x8002c2 <MAXData11>
	if(led[14 + offset] == 1) {MAXData11 |= 1<<2;}
 8e6:	8c 01       	movw	r16, r24
 8e8:	00 5e       	subi	r16, 0xE0	; 224
 8ea:	1e 4f       	sbci	r17, 0xFE	; 254
 8ec:	f8 01       	movw	r30, r16
 8ee:	d6 84       	ldd	r13, Z+14	; 0x0e
 8f0:	f1 e0       	ldi	r31, 0x01	; 1
 8f2:	df 12       	cpse	r13, r31
 8f4:	05 c0       	rjmp	.+10     	; 0x900 <__stack+0x1>
 8f6:	10 91 c2 02 	lds	r17, 0x02C2	; 0x8002c2 <MAXData11>
 8fa:	14 60       	ori	r17, 0x04	; 4
 8fc:	10 93 c2 02 	sts	0x02C2, r17	; 0x8002c2 <MAXData11>
	if(led[15 + offset] == 1) {MAXData11 |= 1<<1;}
 900:	8c 01       	movw	r16, r24
 902:	00 5e       	subi	r16, 0xE0	; 224
 904:	1e 4f       	sbci	r17, 0xFE	; 254
 906:	f8 01       	movw	r30, r16
 908:	c7 84       	ldd	r12, Z+15	; 0x0f
 90a:	f1 e0       	ldi	r31, 0x01	; 1
 90c:	cf 12       	cpse	r12, r31
 90e:	05 c0       	rjmp	.+10     	; 0x91a <__stack+0x1b>
 910:	10 91 c2 02 	lds	r17, 0x02C2	; 0x8002c2 <MAXData11>
 914:	12 60       	ori	r17, 0x02	; 2
 916:	10 93 c2 02 	sts	0x02C2, r17	; 0x8002c2 <MAXData11>
	if(led[16 + offset] == 1) {MAXData11 |= 1<<0;}
 91a:	8c 01       	movw	r16, r24
 91c:	00 5e       	subi	r16, 0xE0	; 224
 91e:	1e 4f       	sbci	r17, 0xFE	; 254
 920:	f8 01       	movw	r30, r16
 922:	b0 88       	ldd	r11, Z+16	; 0x10
 924:	f1 e0       	ldi	r31, 0x01	; 1
 926:	bf 12       	cpse	r11, r31
 928:	05 c0       	rjmp	.+10     	; 0x934 <__stack+0x35>
 92a:	10 91 c2 02 	lds	r17, 0x02C2	; 0x8002c2 <MAXData11>
 92e:	11 60       	ori	r17, 0x01	; 1
 930:	10 93 c2 02 	sts	0x02C2, r17	; 0x8002c2 <MAXData11>
	if(led[17 + offset] == 1) {MAXData12 |= 1<<7;}
 934:	8c 01       	movw	r16, r24
 936:	00 5e       	subi	r16, 0xE0	; 224
 938:	1e 4f       	sbci	r17, 0xFE	; 254
 93a:	f8 01       	movw	r30, r16
 93c:	a1 88       	ldd	r10, Z+17	; 0x11
 93e:	f1 e0       	ldi	r31, 0x01	; 1
 940:	af 12       	cpse	r10, r31
 942:	03 c0       	rjmp	.+6      	; 0x94a <__stack+0x4b>
 944:	10 e8       	ldi	r17, 0x80	; 128
 946:	10 93 c4 02 	sts	0x02C4, r17	; 0x8002c4 <MAXData12>
	if(led[18 + offset] == 1) {MAXData12 |= 1<<6;}
 94a:	8c 01       	movw	r16, r24
 94c:	00 5e       	subi	r16, 0xE0	; 224
 94e:	1e 4f       	sbci	r17, 0xFE	; 254
 950:	f8 01       	movw	r30, r16
 952:	92 88       	ldd	r9, Z+18	; 0x12
 954:	f1 e0       	ldi	r31, 0x01	; 1
 956:	9f 12       	cpse	r9, r31
 958:	05 c0       	rjmp	.+10     	; 0x964 <__stack+0x65>
 95a:	10 91 c4 02 	lds	r17, 0x02C4	; 0x8002c4 <MAXData12>
 95e:	10 64       	ori	r17, 0x40	; 64
 960:	10 93 c4 02 	sts	0x02C4, r17	; 0x8002c4 <MAXData12>
	if(led[19 + offset] == 1) {MAXData12 |= 1<<5;}
 964:	8c 01       	movw	r16, r24
 966:	00 5e       	subi	r16, 0xE0	; 224
 968:	1e 4f       	sbci	r17, 0xFE	; 254
 96a:	f8 01       	movw	r30, r16
 96c:	83 88       	ldd	r8, Z+19	; 0x13
 96e:	f1 e0       	ldi	r31, 0x01	; 1
 970:	8f 12       	cpse	r8, r31
 972:	05 c0       	rjmp	.+10     	; 0x97e <__stack+0x7f>
 974:	10 91 c4 02 	lds	r17, 0x02C4	; 0x8002c4 <MAXData12>
 978:	10 62       	ori	r17, 0x20	; 32
 97a:	10 93 c4 02 	sts	0x02C4, r17	; 0x8002c4 <MAXData12>
	if(led[20 + offset] == 1) {MAXData12 |= 1<<4;}
 97e:	8c 01       	movw	r16, r24
 980:	00 5e       	subi	r16, 0xE0	; 224
 982:	1e 4f       	sbci	r17, 0xFE	; 254
 984:	f8 01       	movw	r30, r16
 986:	74 88       	ldd	r7, Z+20	; 0x14
 988:	f1 e0       	ldi	r31, 0x01	; 1
 98a:	7f 12       	cpse	r7, r31
 98c:	05 c0       	rjmp	.+10     	; 0x998 <__stack+0x99>
 98e:	10 91 c4 02 	lds	r17, 0x02C4	; 0x8002c4 <MAXData12>
 992:	10 61       	ori	r17, 0x10	; 16
 994:	10 93 c4 02 	sts	0x02C4, r17	; 0x8002c4 <MAXData12>
	if(led[21 + offset] == 1) {MAXData12 |= 1<<3;}
 998:	8c 01       	movw	r16, r24
 99a:	00 5e       	subi	r16, 0xE0	; 224
 99c:	1e 4f       	sbci	r17, 0xFE	; 254
 99e:	f8 01       	movw	r30, r16
 9a0:	65 88       	ldd	r6, Z+21	; 0x15
 9a2:	f1 e0       	ldi	r31, 0x01	; 1
 9a4:	6f 12       	cpse	r6, r31
 9a6:	05 c0       	rjmp	.+10     	; 0x9b2 <__stack+0xb3>
 9a8:	10 91 c4 02 	lds	r17, 0x02C4	; 0x8002c4 <MAXData12>
 9ac:	18 60       	ori	r17, 0x08	; 8
 9ae:	10 93 c4 02 	sts	0x02C4, r17	; 0x8002c4 <MAXData12>
	if(led[22 + offset] == 1) {MAXData12 |= 1<<2;}
 9b2:	8c 01       	movw	r16, r24
 9b4:	00 5e       	subi	r16, 0xE0	; 224
 9b6:	1e 4f       	sbci	r17, 0xFE	; 254
 9b8:	f8 01       	movw	r30, r16
 9ba:	56 88       	ldd	r5, Z+22	; 0x16
 9bc:	f1 e0       	ldi	r31, 0x01	; 1
 9be:	5f 12       	cpse	r5, r31
 9c0:	05 c0       	rjmp	.+10     	; 0x9cc <__stack+0xcd>
 9c2:	10 91 c4 02 	lds	r17, 0x02C4	; 0x8002c4 <MAXData12>
 9c6:	14 60       	ori	r17, 0x04	; 4
 9c8:	10 93 c4 02 	sts	0x02C4, r17	; 0x8002c4 <MAXData12>
	if(led[23 + offset] == 1) {MAXData12 |= 1<<1;}
 9cc:	8c 01       	movw	r16, r24
 9ce:	00 5e       	subi	r16, 0xE0	; 224
 9d0:	1e 4f       	sbci	r17, 0xFE	; 254
 9d2:	f8 01       	movw	r30, r16
 9d4:	17 89       	ldd	r17, Z+23	; 0x17
 9d6:	11 30       	cpi	r17, 0x01	; 1
 9d8:	29 f4       	brne	.+10     	; 0x9e4 <__stack+0xe5>
 9da:	00 91 c4 02 	lds	r16, 0x02C4	; 0x8002c4 <MAXData12>
 9de:	02 60       	ori	r16, 0x02	; 2
 9e0:	00 93 c4 02 	sts	0x02C4, r16	; 0x8002c4 <MAXData12>
	if(led[24 + offset] == 1) {MAXData12 |= 1<<0;}
 9e4:	80 5e       	subi	r24, 0xE0	; 224
 9e6:	9e 4f       	sbci	r25, 0xFE	; 254
 9e8:	fc 01       	movw	r30, r24
 9ea:	90 8d       	ldd	r25, Z+24	; 0x18
 9ec:	91 30       	cpi	r25, 0x01	; 1
 9ee:	29 f4       	brne	.+10     	; 0x9fa <__stack+0xfb>
 9f0:	80 91 c4 02 	lds	r24, 0x02C4	; 0x8002c4 <MAXData12>
 9f4:	81 60       	ori	r24, 0x01	; 1
 9f6:	80 93 c4 02 	sts	0x02C4, r24	; 0x8002c4 <MAXData12>
		
	//halbe Helligkeit
	if(ledare == 1) {
 9fa:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <ledare>
 9fe:	81 30       	cpi	r24, 0x01	; 1
 a00:	09 f0       	breq	.+2      	; 0xa04 <__stack+0x105>
 a02:	bd c0       	rjmp	.+378    	; 0xb7e <__stack+0x27f>
			if(led[0 + offset] == 2) {MAXData21 |= 1<<0;}
 a04:	d2 30       	cpi	r29, 0x02	; 2
 a06:	29 f4       	brne	.+10     	; 0xa12 <__stack+0x113>
 a08:	80 91 c1 02 	lds	r24, 0x02C1	; 0x8002c1 <MAXData21>
 a0c:	81 60       	ori	r24, 0x01	; 1
 a0e:	80 93 c1 02 	sts	0x02C1, r24	; 0x8002c1 <MAXData21>
			if(led[1 + offset] == 2) {MAXData22 |= 1<<7;}
 a12:	c2 30       	cpi	r28, 0x02	; 2
 a14:	29 f4       	brne	.+10     	; 0xa20 <__stack+0x121>
 a16:	80 91 c3 02 	lds	r24, 0x02C3	; 0x8002c3 <MAXData22>
 a1a:	80 68       	ori	r24, 0x80	; 128
 a1c:	80 93 c3 02 	sts	0x02C3, r24	; 0x8002c3 <MAXData22>
			if(led[2 + offset] == 2) {MAXData22 |= 1<<6;}
 a20:	b2 30       	cpi	r27, 0x02	; 2
 a22:	29 f4       	brne	.+10     	; 0xa2e <__stack+0x12f>
 a24:	80 91 c3 02 	lds	r24, 0x02C3	; 0x8002c3 <MAXData22>
 a28:	80 64       	ori	r24, 0x40	; 64
 a2a:	80 93 c3 02 	sts	0x02C3, r24	; 0x8002c3 <MAXData22>
			if(led[3 + offset] == 2) {MAXData22 |= 1<<5;}
 a2e:	a2 30       	cpi	r26, 0x02	; 2
 a30:	29 f4       	brne	.+10     	; 0xa3c <__stack+0x13d>
 a32:	80 91 c3 02 	lds	r24, 0x02C3	; 0x8002c3 <MAXData22>
 a36:	80 62       	ori	r24, 0x20	; 32
 a38:	80 93 c3 02 	sts	0x02C3, r24	; 0x8002c3 <MAXData22>
			if(led[4 + offset] == 2) {MAXData22 |= 1<<4;}
 a3c:	f2 e0       	ldi	r31, 0x02	; 2
 a3e:	4f 12       	cpse	r4, r31
 a40:	05 c0       	rjmp	.+10     	; 0xa4c <__stack+0x14d>
 a42:	80 91 c3 02 	lds	r24, 0x02C3	; 0x8002c3 <MAXData22>
 a46:	80 61       	ori	r24, 0x10	; 16
 a48:	80 93 c3 02 	sts	0x02C3, r24	; 0x8002c3 <MAXData22>
			if(led[5 + offset] == 2) {MAXData22 |= 1<<3;}
 a4c:	82 e0       	ldi	r24, 0x02	; 2
 a4e:	38 12       	cpse	r3, r24
 a50:	05 c0       	rjmp	.+10     	; 0xa5c <__stack+0x15d>
 a52:	80 91 c3 02 	lds	r24, 0x02C3	; 0x8002c3 <MAXData22>
 a56:	88 60       	ori	r24, 0x08	; 8
 a58:	80 93 c3 02 	sts	0x02C3, r24	; 0x8002c3 <MAXData22>
			if(led[6 + offset] == 2) {MAXData22 |= 1<<2;}
 a5c:	72 30       	cpi	r23, 0x02	; 2
 a5e:	29 f4       	brne	.+10     	; 0xa6a <__stack+0x16b>
 a60:	80 91 c3 02 	lds	r24, 0x02C3	; 0x8002c3 <MAXData22>
 a64:	84 60       	ori	r24, 0x04	; 4
 a66:	80 93 c3 02 	sts	0x02C3, r24	; 0x8002c3 <MAXData22>
			if(led[7 + offset] == 2) {MAXData22 |= 1<<1;}
 a6a:	62 30       	cpi	r22, 0x02	; 2
 a6c:	29 f4       	brne	.+10     	; 0xa78 <__stack+0x179>
 a6e:	80 91 c3 02 	lds	r24, 0x02C3	; 0x8002c3 <MAXData22>
 a72:	82 60       	ori	r24, 0x02	; 2
 a74:	80 93 c3 02 	sts	0x02C3, r24	; 0x8002c3 <MAXData22>
			if(led[8 + offset] == 2) {MAXData22 |= 1<<0;}
 a78:	52 30       	cpi	r21, 0x02	; 2
 a7a:	29 f4       	brne	.+10     	; 0xa86 <__stack+0x187>
 a7c:	80 91 c3 02 	lds	r24, 0x02C3	; 0x8002c3 <MAXData22>
 a80:	81 60       	ori	r24, 0x01	; 1
 a82:	80 93 c3 02 	sts	0x02C3, r24	; 0x8002c3 <MAXData22>
			if(led[9 + offset] == 2) {MAXData11 |= 1<<7;}
 a86:	42 30       	cpi	r20, 0x02	; 2
 a88:	29 f4       	brne	.+10     	; 0xa94 <__stack+0x195>
 a8a:	80 91 c2 02 	lds	r24, 0x02C2	; 0x8002c2 <MAXData11>
 a8e:	80 68       	ori	r24, 0x80	; 128
 a90:	80 93 c2 02 	sts	0x02C2, r24	; 0x8002c2 <MAXData11>
			if(led[10 + offset] == 2) {MAXData11 |= 1<<6;}
 a94:	32 30       	cpi	r19, 0x02	; 2
 a96:	29 f4       	brne	.+10     	; 0xaa2 <__stack+0x1a3>
 a98:	80 91 c2 02 	lds	r24, 0x02C2	; 0x8002c2 <MAXData11>
 a9c:	80 64       	ori	r24, 0x40	; 64
 a9e:	80 93 c2 02 	sts	0x02C2, r24	; 0x8002c2 <MAXData11>
			if(led[11 + offset] == 2) {MAXData11 |= 1<<5;}
 aa2:	22 30       	cpi	r18, 0x02	; 2
 aa4:	29 f4       	brne	.+10     	; 0xab0 <__stack+0x1b1>
 aa6:	80 91 c2 02 	lds	r24, 0x02C2	; 0x8002c2 <MAXData11>
 aaa:	80 62       	ori	r24, 0x20	; 32
 aac:	80 93 c2 02 	sts	0x02C2, r24	; 0x8002c2 <MAXData11>
			if(led[12 + offset] == 2) {MAXData11 |= 1<<4;}
 ab0:	e2 e0       	ldi	r30, 0x02	; 2
 ab2:	fe 12       	cpse	r15, r30
 ab4:	05 c0       	rjmp	.+10     	; 0xac0 <__stack+0x1c1>
 ab6:	80 91 c2 02 	lds	r24, 0x02C2	; 0x8002c2 <MAXData11>
 aba:	80 61       	ori	r24, 0x10	; 16
 abc:	80 93 c2 02 	sts	0x02C2, r24	; 0x8002c2 <MAXData11>
			if(led[13 + offset] == 2) {MAXData11 |= 1<<3;}
 ac0:	f2 e0       	ldi	r31, 0x02	; 2
 ac2:	ef 12       	cpse	r14, r31
 ac4:	05 c0       	rjmp	.+10     	; 0xad0 <__stack+0x1d1>
 ac6:	80 91 c2 02 	lds	r24, 0x02C2	; 0x8002c2 <MAXData11>
 aca:	88 60       	ori	r24, 0x08	; 8
 acc:	80 93 c2 02 	sts	0x02C2, r24	; 0x8002c2 <MAXData11>
			if(led[14 + offset] == 2) {MAXData11 |= 1<<2;}
 ad0:	22 e0       	ldi	r18, 0x02	; 2
 ad2:	d2 12       	cpse	r13, r18
 ad4:	05 c0       	rjmp	.+10     	; 0xae0 <__stack+0x1e1>
 ad6:	80 91 c2 02 	lds	r24, 0x02C2	; 0x8002c2 <MAXData11>
 ada:	84 60       	ori	r24, 0x04	; 4
 adc:	80 93 c2 02 	sts	0x02C2, r24	; 0x8002c2 <MAXData11>
			if(led[15 + offset] == 2) {MAXData11 |= 1<<1;}
 ae0:	82 e0       	ldi	r24, 0x02	; 2
 ae2:	c8 12       	cpse	r12, r24
 ae4:	05 c0       	rjmp	.+10     	; 0xaf0 <__stack+0x1f1>
 ae6:	80 91 c2 02 	lds	r24, 0x02C2	; 0x8002c2 <MAXData11>
 aea:	82 60       	ori	r24, 0x02	; 2
 aec:	80 93 c2 02 	sts	0x02C2, r24	; 0x8002c2 <MAXData11>
			if(led[16 + offset] == 2) {MAXData11 |= 1<<0;}
 af0:	e2 e0       	ldi	r30, 0x02	; 2
 af2:	be 12       	cpse	r11, r30
 af4:	05 c0       	rjmp	.+10     	; 0xb00 <__stack+0x201>
 af6:	80 91 c2 02 	lds	r24, 0x02C2	; 0x8002c2 <MAXData11>
 afa:	81 60       	ori	r24, 0x01	; 1
 afc:	80 93 c2 02 	sts	0x02C2, r24	; 0x8002c2 <MAXData11>
			if(led[17 + offset] == 2) {MAXData12 |= 1<<7;}
 b00:	f2 e0       	ldi	r31, 0x02	; 2
 b02:	af 12       	cpse	r10, r31
 b04:	05 c0       	rjmp	.+10     	; 0xb10 <__stack+0x211>
 b06:	80 91 c4 02 	lds	r24, 0x02C4	; 0x8002c4 <MAXData12>
 b0a:	80 68       	ori	r24, 0x80	; 128
 b0c:	80 93 c4 02 	sts	0x02C4, r24	; 0x8002c4 <MAXData12>
			if(led[18 + offset] == 2) {MAXData12 |= 1<<6;}
 b10:	22 e0       	ldi	r18, 0x02	; 2
 b12:	92 12       	cpse	r9, r18
 b14:	05 c0       	rjmp	.+10     	; 0xb20 <__stack+0x221>
 b16:	80 91 c4 02 	lds	r24, 0x02C4	; 0x8002c4 <MAXData12>
 b1a:	80 64       	ori	r24, 0x40	; 64
 b1c:	80 93 c4 02 	sts	0x02C4, r24	; 0x8002c4 <MAXData12>
			if(led[19 + offset] == 2) {MAXData12 |= 1<<5;}
 b20:	82 e0       	ldi	r24, 0x02	; 2
 b22:	88 12       	cpse	r8, r24
 b24:	05 c0       	rjmp	.+10     	; 0xb30 <__stack+0x231>
 b26:	80 91 c4 02 	lds	r24, 0x02C4	; 0x8002c4 <MAXData12>
 b2a:	80 62       	ori	r24, 0x20	; 32
 b2c:	80 93 c4 02 	sts	0x02C4, r24	; 0x8002c4 <MAXData12>
			if(led[20 + offset] == 2) {MAXData12 |= 1<<4;}
 b30:	e2 e0       	ldi	r30, 0x02	; 2
 b32:	7e 12       	cpse	r7, r30
 b34:	05 c0       	rjmp	.+10     	; 0xb40 <__stack+0x241>
 b36:	80 91 c4 02 	lds	r24, 0x02C4	; 0x8002c4 <MAXData12>
 b3a:	80 61       	ori	r24, 0x10	; 16
 b3c:	80 93 c4 02 	sts	0x02C4, r24	; 0x8002c4 <MAXData12>
			if(led[21 + offset] == 2) {MAXData12 |= 1<<3;}
 b40:	f2 e0       	ldi	r31, 0x02	; 2
 b42:	6f 12       	cpse	r6, r31
 b44:	05 c0       	rjmp	.+10     	; 0xb50 <__stack+0x251>
 b46:	80 91 c4 02 	lds	r24, 0x02C4	; 0x8002c4 <MAXData12>
 b4a:	88 60       	ori	r24, 0x08	; 8
 b4c:	80 93 c4 02 	sts	0x02C4, r24	; 0x8002c4 <MAXData12>
			if(led[22 + offset] == 2) {MAXData12 |= 1<<2;}
 b50:	22 e0       	ldi	r18, 0x02	; 2
 b52:	52 12       	cpse	r5, r18
 b54:	05 c0       	rjmp	.+10     	; 0xb60 <__stack+0x261>
 b56:	80 91 c4 02 	lds	r24, 0x02C4	; 0x8002c4 <MAXData12>
 b5a:	84 60       	ori	r24, 0x04	; 4
 b5c:	80 93 c4 02 	sts	0x02C4, r24	; 0x8002c4 <MAXData12>
			if(led[23 + offset] == 2) {MAXData12 |= 1<<1;}
 b60:	12 30       	cpi	r17, 0x02	; 2
 b62:	29 f4       	brne	.+10     	; 0xb6e <__stack+0x26f>
 b64:	80 91 c4 02 	lds	r24, 0x02C4	; 0x8002c4 <MAXData12>
 b68:	82 60       	ori	r24, 0x02	; 2
 b6a:	80 93 c4 02 	sts	0x02C4, r24	; 0x8002c4 <MAXData12>
			if(led[24 + offset] == 2) {MAXData12 |= 1<<0;}
 b6e:	92 30       	cpi	r25, 0x02	; 2
 b70:	59 f4       	brne	.+22     	; 0xb88 <__stack+0x289>
 b72:	80 91 c4 02 	lds	r24, 0x02C4	; 0x8002c4 <MAXData12>
 b76:	81 60       	ori	r24, 0x01	; 1
 b78:	80 93 c4 02 	sts	0x02C4, r24	; 0x8002c4 <MAXData12>
 b7c:	05 c0       	rjmp	.+10     	; 0xb88 <__stack+0x289>
	}
	
	ledare++;
 b7e:	8f 5f       	subi	r24, 0xFF	; 255
 b80:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <ledare>
	if(ledare == 2) ledare = 0;
 b84:	82 30       	cpi	r24, 0x02	; 2
 b86:	11 f4       	brne	.+4      	; 0xb8c <__stack+0x28d>
 b88:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <ledare>
	
}
 b8c:	df 91       	pop	r29
 b8e:	cf 91       	pop	r28
 b90:	1f 91       	pop	r17
 b92:	0f 91       	pop	r16
 b94:	ff 90       	pop	r15
 b96:	ef 90       	pop	r14
 b98:	df 90       	pop	r13
 b9a:	cf 90       	pop	r12
 b9c:	bf 90       	pop	r11
 b9e:	af 90       	pop	r10
 ba0:	9f 90       	pop	r9
 ba2:	8f 90       	pop	r8
 ba4:	7f 90       	pop	r7
 ba6:	6f 90       	pop	r6
 ba8:	5f 90       	pop	r5
 baa:	4f 90       	pop	r4
 bac:	3f 90       	pop	r3
 bae:	08 95       	ret

00000bb0 <__vector_14>:
//Funktion: ISR
//Läuft in hoher zeitlicher Frequenz (Interrupt), setzt die RunFlags die oben zurückgegeben werden, schickt Daten an Chips und aktiviert die korrekte Schicht
//Aufgerufene Funktionen: convertArrayToBitmask (ledout.c), SPI_Send (spi.c)
//Zurückgegebene Werte	: keine
//----------------------------------------------------------------------------------------------
ISR(TIMER0_COMPA_vect) {
 bb0:	1f 92       	push	r1
 bb2:	0f 92       	push	r0
 bb4:	0f b6       	in	r0, 0x3f	; 63
 bb6:	0f 92       	push	r0
 bb8:	11 24       	eor	r1, r1
 bba:	2f 93       	push	r18
 bbc:	3f 93       	push	r19
 bbe:	4f 93       	push	r20
 bc0:	5f 93       	push	r21
 bc2:	6f 93       	push	r22
 bc4:	7f 93       	push	r23
 bc6:	8f 93       	push	r24
 bc8:	9f 93       	push	r25
 bca:	af 93       	push	r26
 bcc:	bf 93       	push	r27
 bce:	ef 93       	push	r30
 bd0:	ff 93       	push	r31
	//set 10ms runflag
	if(t10ms == 3) {
 bd2:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <t10ms>
 bd6:	83 30       	cpi	r24, 0x03	; 3
 bd8:	31 f4       	brne	.+12     	; 0xbe6 <__vector_14+0x36>
		t10ms = 0;
 bda:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <t10ms>
		t10msflag = 1;
 bde:	81 e0       	ldi	r24, 0x01	; 1
 be0:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <t10msflag>
 be4:	03 c0       	rjmp	.+6      	; 0xbec <__vector_14+0x3c>
	}else{t10ms++;}
 be6:	8f 5f       	subi	r24, 0xFF	; 255
 be8:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <t10ms>
		
	//set button runflag
	if(t10msb == 150) {
 bec:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <t10msb>
 bf0:	86 39       	cpi	r24, 0x96	; 150
 bf2:	31 f4       	brne	.+12     	; 0xc00 <__vector_14+0x50>
		t10msb = 0;
 bf4:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <t10msb>
		t10msbflag = 1;
 bf8:	81 e0       	ldi	r24, 0x01	; 1
 bfa:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <t10msbflag>
 bfe:	03 c0       	rjmp	.+6      	; 0xc06 <__vector_14+0x56>
		}else{t10msb++;}
 c00:	8f 5f       	subi	r24, 0xFF	; 255
 c02:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <t10msb>
	
	//t10msflag = 1;
	//Turn off all LayerFETs
	PORTC = 0x00;
 c06:	18 b8       	out	0x08, r1	; 8
	//get SPI data from LED Array
	convertArrayToBitmask(currl);
 c08:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <currl>
 c0c:	0e 94 97 03 	call	0x72e	; 0x72e <convertArrayToBitmask>
	
	//Send Data to lower Chip
	SPI_Send(MAXData21);
 c10:	80 91 c1 02 	lds	r24, 0x02C1	; 0x8002c1 <MAXData21>
 c14:	0e 94 f3 06 	call	0xde6	; 0xde6 <SPI_Send>
	SPI_Send(MAXData22);
 c18:	80 91 c3 02 	lds	r24, 0x02C3	; 0x8002c3 <MAXData22>
 c1c:	0e 94 f3 06 	call	0xde6	; 0xde6 <SPI_Send>
	//Send Data to upper Chip
	SPI_Send(MAXData11);
 c20:	80 91 c2 02 	lds	r24, 0x02C2	; 0x8002c2 <MAXData11>
 c24:	0e 94 f3 06 	call	0xde6	; 0xde6 <SPI_Send>
	SPI_Send(MAXData12);
 c28:	80 91 c4 02 	lds	r24, 0x02C4	; 0x8002c4 <MAXData12>
 c2c:	0e 94 f3 06 	call	0xde6	; 0xde6 <SPI_Send>
	//Latch upper Chip
	PORTD |= (1<<PD7);
 c30:	5f 9a       	sbi	0x0b, 7	; 11
	PORTD &= ~(1<<PD7);
 c32:	5f 98       	cbi	0x0b, 7	; 11
	
	//turn on appropriate FET
	switch(currl) {
 c34:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <currl>
 c38:	82 30       	cpi	r24, 0x02	; 2
 c3a:	71 f0       	breq	.+28     	; 0xc58 <__vector_14+0xa8>
 c3c:	28 f4       	brcc	.+10     	; 0xc48 <__vector_14+0x98>
 c3e:	88 23       	and	r24, r24
 c40:	79 f0       	breq	.+30     	; 0xc60 <__vector_14+0xb0>
 c42:	81 30       	cpi	r24, 0x01	; 1
 c44:	59 f0       	breq	.+22     	; 0xc5c <__vector_14+0xac>
 c46:	0d c0       	rjmp	.+26     	; 0xc62 <__vector_14+0xb2>
 c48:	83 30       	cpi	r24, 0x03	; 3
 c4a:	21 f0       	breq	.+8      	; 0xc54 <__vector_14+0xa4>
 c4c:	84 30       	cpi	r24, 0x04	; 4
 c4e:	49 f4       	brne	.+18     	; 0xc62 <__vector_14+0xb2>
		case 4: PORTC |= (1<<4); break;
 c50:	44 9a       	sbi	0x08, 4	; 8
 c52:	07 c0       	rjmp	.+14     	; 0xc62 <__vector_14+0xb2>
		case 3: PORTC |= (1<<3); break;
 c54:	43 9a       	sbi	0x08, 3	; 8
 c56:	05 c0       	rjmp	.+10     	; 0xc62 <__vector_14+0xb2>
		case 2: PORTC |= (1<<2); break;
 c58:	42 9a       	sbi	0x08, 2	; 8
 c5a:	03 c0       	rjmp	.+6      	; 0xc62 <__vector_14+0xb2>
		case 1: PORTC |= (1<<1); break;
 c5c:	41 9a       	sbi	0x08, 1	; 8
 c5e:	01 c0       	rjmp	.+2      	; 0xc62 <__vector_14+0xb2>
		case 0: PORTC |= (1<<0); break;
 c60:	40 9a       	sbi	0x08, 0	; 8
		default:break;
	}
	
	currl++;
 c62:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <currl>
 c66:	8f 5f       	subi	r24, 0xFF	; 255
	if (currl == 5) {currl = 0;}
 c68:	85 30       	cpi	r24, 0x05	; 5
 c6a:	19 f0       	breq	.+6      	; 0xc72 <__vector_14+0xc2>
		case 1: PORTC |= (1<<1); break;
		case 0: PORTC |= (1<<0); break;
		default:break;
	}
	
	currl++;
 c6c:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <currl>
 c70:	02 c0       	rjmp	.+4      	; 0xc76 <__vector_14+0xc6>
	if (currl == 5) {currl = 0;}
 c72:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <currl>
}
 c76:	ff 91       	pop	r31
 c78:	ef 91       	pop	r30
 c7a:	bf 91       	pop	r27
 c7c:	af 91       	pop	r26
 c7e:	9f 91       	pop	r25
 c80:	8f 91       	pop	r24
 c82:	7f 91       	pop	r23
 c84:	6f 91       	pop	r22
 c86:	5f 91       	pop	r21
 c88:	4f 91       	pop	r20
 c8a:	3f 91       	pop	r19
 c8c:	2f 91       	pop	r18
 c8e:	0f 90       	pop	r0
 c90:	0f be       	out	0x3f, r0	; 63
 c92:	0f 90       	pop	r0
 c94:	1f 90       	pop	r1
 c96:	18 95       	reti

00000c98 <ioinit>:
//Aufgerufene Funktionen: keine
//Zurückgegebene Werte	: keine
//----------------------------------------------------------------------------------------------
void ioinit(void) {
	//LE Pins als Output deklarieren
	DDRB |= (1<<PB2)|(1<<PB1);
 c98:	84 b1       	in	r24, 0x04	; 4
 c9a:	86 60       	ori	r24, 0x06	; 6
 c9c:	84 b9       	out	0x04, r24	; 4
	DDRD |= (1<<PD7)|(1<<PD6);
 c9e:	8a b1       	in	r24, 0x0a	; 10
 ca0:	80 6c       	ori	r24, 0xC0	; 192
 ca2:	8a b9       	out	0x0a, r24	; 10
	//OE Pins als Output deklarieren
	DDRB |= (1<<PB0);
 ca4:	20 9a       	sbi	0x04, 0	; 4
	//Layer auf Output setzen
	DDRC = 0xff;
 ca6:	8f ef       	ldi	r24, 0xFF	; 255
 ca8:	87 b9       	out	0x07, r24	; 7
 caa:	08 95       	ret

00000cac <main>:
//----------------------------------------------------------------------------------------------
int main(void)
{
	
	//initialisiere alles
	ioinit();
 cac:	0e 94 4c 06 	call	0xc98	; 0xc98 <ioinit>
	initLEDtimer();
 cb0:	0e 94 77 03 	call	0x6ee	; 0x6ee <initLEDtimer>
	SPI_MasterInit();
 cb4:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <SPI_MasterInit>
	initbtn();
 cb8:	0e 94 b8 02 	call	0x570	; 0x570 <initbtn>
	
	//aktiviere Interrupts
	sei();
 cbc:	78 94       	sei

    while (1) 
    {
		
		//lese alle Knöpfe ein, setze Modus passend (siehe button.c)
		if(get100msbflag()) {
 cbe:	0e 94 8e 03 	call	0x71c	; 0x71c <get100msbflag>
 cc2:	81 11       	cpse	r24, r1
			getBtn();
 cc4:	0e 94 50 03 	call	0x6a0	; 0x6a0 <getBtn>
		}
		
		//animationsfunktionen aufrufen
		if(get10msflag()) {
 cc8:	0e 94 85 03 	call	0x70a	; 0x70a <get10msflag>
 ccc:	88 23       	and	r24, r24
 cce:	b9 f3       	breq	.-18     	; 0xcbe <main+0x12>
			animate(getMode());
 cd0:	0e 94 b5 02 	call	0x56a	; 0x56a <getMode>
 cd4:	0e 94 53 00 	call	0xa6	; 0xa6 <animate>
 cd8:	f2 cf       	rjmp	.-28     	; 0xcbe <main+0x12>

00000cda <ledleft>:


//gibt die LED links von led zurück
unsigned char ledleft(unsigned char led) {
	
	if(led%5 != 0) {
 cda:	9d ec       	ldi	r25, 0xCD	; 205
 cdc:	89 9f       	mul	r24, r25
 cde:	91 2d       	mov	r25, r1
 ce0:	11 24       	eor	r1, r1
 ce2:	96 95       	lsr	r25
 ce4:	96 95       	lsr	r25
 ce6:	29 2f       	mov	r18, r25
 ce8:	22 0f       	add	r18, r18
 cea:	22 0f       	add	r18, r18
 cec:	92 0f       	add	r25, r18
 cee:	89 17       	cp	r24, r25
 cf0:	11 f0       	breq	.+4      	; 0xcf6 <ledleft+0x1c>
		return (led-1);
 cf2:	81 50       	subi	r24, 0x01	; 1
 cf4:	08 95       	ret
	}else return 126;
 cf6:	8e e7       	ldi	r24, 0x7E	; 126
	
}
 cf8:	08 95       	ret

00000cfa <ledright>:

//gibt die LED rechts von led zurück
unsigned char ledright(unsigned char led) {
 cfa:	28 2f       	mov	r18, r24
	
	if((led+1)%5 != 0) {
 cfc:	90 e0       	ldi	r25, 0x00	; 0
 cfe:	01 96       	adiw	r24, 0x01	; 1
 d00:	65 e0       	ldi	r22, 0x05	; 5
 d02:	70 e0       	ldi	r23, 0x00	; 0
 d04:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <__divmodhi4>
 d08:	89 2b       	or	r24, r25
 d0a:	19 f0       	breq	.+6      	; 0xd12 <ledright+0x18>
		return (led+1);
 d0c:	81 e0       	ldi	r24, 0x01	; 1
 d0e:	82 0f       	add	r24, r18
 d10:	08 95       	ret
	}else return 126;
 d12:	8e e7       	ldi	r24, 0x7E	; 126
	
}
 d14:	08 95       	ret

00000d16 <ledfront>:

//gibt die LED vor led zurück
unsigned char ledfront(unsigned char led) {
	
	if(led < 5) {return 126;}
 d16:	85 30       	cpi	r24, 0x05	; 5
 d18:	30 f1       	brcs	.+76     	; 0xd66 <ledfront+0x50>
	if(led > 24 && (led - 25) < 5) {return 126;}
 d1a:	89 31       	cpi	r24, 0x19	; 25
 d1c:	38 f0       	brcs	.+14     	; 0xd2c <ledfront+0x16>
 d1e:	28 2f       	mov	r18, r24
 d20:	30 e0       	ldi	r19, 0x00	; 0
 d22:	29 51       	subi	r18, 0x19	; 25
 d24:	31 09       	sbc	r19, r1
 d26:	25 30       	cpi	r18, 0x05	; 5
 d28:	31 05       	cpc	r19, r1
 d2a:	fc f0       	brlt	.+62     	; 0xd6a <ledfront+0x54>
	if(led > 49 && (led - 50) < 5) {return 126;}
 d2c:	82 33       	cpi	r24, 0x32	; 50
 d2e:	38 f0       	brcs	.+14     	; 0xd3e <ledfront+0x28>
 d30:	28 2f       	mov	r18, r24
 d32:	30 e0       	ldi	r19, 0x00	; 0
 d34:	22 53       	subi	r18, 0x32	; 50
 d36:	31 09       	sbc	r19, r1
 d38:	25 30       	cpi	r18, 0x05	; 5
 d3a:	31 05       	cpc	r19, r1
 d3c:	c4 f0       	brlt	.+48     	; 0xd6e <ledfront+0x58>
	if(led > 74 && (led - 75) < 5) {return 126;}
 d3e:	8b 34       	cpi	r24, 0x4B	; 75
 d40:	38 f0       	brcs	.+14     	; 0xd50 <ledfront+0x3a>
 d42:	28 2f       	mov	r18, r24
 d44:	30 e0       	ldi	r19, 0x00	; 0
 d46:	2b 54       	subi	r18, 0x4B	; 75
 d48:	31 09       	sbc	r19, r1
 d4a:	25 30       	cpi	r18, 0x05	; 5
 d4c:	31 05       	cpc	r19, r1
 d4e:	8c f0       	brlt	.+34     	; 0xd72 <ledfront+0x5c>
	if(led > 99 && (led - 100) < 5) {return 126;}
 d50:	84 36       	cpi	r24, 0x64	; 100
 d52:	38 f0       	brcs	.+14     	; 0xd62 <ledfront+0x4c>
 d54:	28 2f       	mov	r18, r24
 d56:	30 e0       	ldi	r19, 0x00	; 0
 d58:	24 56       	subi	r18, 0x64	; 100
 d5a:	31 09       	sbc	r19, r1
 d5c:	25 30       	cpi	r18, 0x05	; 5
 d5e:	31 05       	cpc	r19, r1
 d60:	54 f0       	brlt	.+20     	; 0xd76 <ledfront+0x60>
		
	return (led - 5);
 d62:	85 50       	subi	r24, 0x05	; 5
 d64:	08 95       	ret
}

//gibt die LED vor led zurück
unsigned char ledfront(unsigned char led) {
	
	if(led < 5) {return 126;}
 d66:	8e e7       	ldi	r24, 0x7E	; 126
 d68:	08 95       	ret
	if(led > 24 && (led - 25) < 5) {return 126;}
 d6a:	8e e7       	ldi	r24, 0x7E	; 126
 d6c:	08 95       	ret
	if(led > 49 && (led - 50) < 5) {return 126;}
 d6e:	8e e7       	ldi	r24, 0x7E	; 126
 d70:	08 95       	ret
	if(led > 74 && (led - 75) < 5) {return 126;}
 d72:	8e e7       	ldi	r24, 0x7E	; 126
 d74:	08 95       	ret
	if(led > 99 && (led - 100) < 5) {return 126;}
 d76:	8e e7       	ldi	r24, 0x7E	; 126
		
	return (led - 5);
	
}
 d78:	08 95       	ret

00000d7a <ledback>:

//gibt die LED hinter led zurück
unsigned char ledback(unsigned char led) {
	
	if(led < 25 && led > 19) {return 126;}
 d7a:	9c ee       	ldi	r25, 0xEC	; 236
 d7c:	98 0f       	add	r25, r24
 d7e:	95 30       	cpi	r25, 0x05	; 5
 d80:	90 f0       	brcs	.+36     	; 0xda6 <ledback+0x2c>
	if(led < 50 && led > 44) {return 126;}
 d82:	93 ed       	ldi	r25, 0xD3	; 211
 d84:	98 0f       	add	r25, r24
 d86:	95 30       	cpi	r25, 0x05	; 5
 d88:	80 f0       	brcs	.+32     	; 0xdaa <ledback+0x30>
	if(led < 75 && led > 69) {return 126;}
 d8a:	9a eb       	ldi	r25, 0xBA	; 186
 d8c:	98 0f       	add	r25, r24
 d8e:	95 30       	cpi	r25, 0x05	; 5
 d90:	70 f0       	brcs	.+28     	; 0xdae <ledback+0x34>
	if(led < 100 && led > 94) {return 126;}
 d92:	91 ea       	ldi	r25, 0xA1	; 161
 d94:	98 0f       	add	r25, r24
 d96:	95 30       	cpi	r25, 0x05	; 5
 d98:	60 f0       	brcs	.+24     	; 0xdb2 <ledback+0x38>
	if(led < 125 && led > 119) {return 126;}
 d9a:	98 e8       	ldi	r25, 0x88	; 136
 d9c:	98 0f       	add	r25, r24
 d9e:	95 30       	cpi	r25, 0x05	; 5
 da0:	50 f0       	brcs	.+20     	; 0xdb6 <ledback+0x3c>
	
	return (led + 5);
 da2:	8b 5f       	subi	r24, 0xFB	; 251
 da4:	08 95       	ret
}

//gibt die LED hinter led zurück
unsigned char ledback(unsigned char led) {
	
	if(led < 25 && led > 19) {return 126;}
 da6:	8e e7       	ldi	r24, 0x7E	; 126
 da8:	08 95       	ret
	if(led < 50 && led > 44) {return 126;}
 daa:	8e e7       	ldi	r24, 0x7E	; 126
 dac:	08 95       	ret
	if(led < 75 && led > 69) {return 126;}
 dae:	8e e7       	ldi	r24, 0x7E	; 126
 db0:	08 95       	ret
	if(led < 100 && led > 94) {return 126;}
 db2:	8e e7       	ldi	r24, 0x7E	; 126
 db4:	08 95       	ret
	if(led < 125 && led > 119) {return 126;}
 db6:	8e e7       	ldi	r24, 0x7E	; 126
	
	return (led + 5);
	
}
 db8:	08 95       	ret

00000dba <ledtop>:

//gibt die LED über led zurück
unsigned char ledtop(unsigned char led) {
	if(led > 99) {return 126;}
 dba:	84 36       	cpi	r24, 0x64	; 100
 dbc:	10 f4       	brcc	.+4      	; 0xdc2 <ledtop+0x8>
	
	return (led + 25);
 dbe:	87 5e       	subi	r24, 0xE7	; 231
 dc0:	08 95       	ret
	
}

//gibt die LED über led zurück
unsigned char ledtop(unsigned char led) {
	if(led > 99) {return 126;}
 dc2:	8e e7       	ldi	r24, 0x7E	; 126
	
	return (led + 25);
}
 dc4:	08 95       	ret

00000dc6 <ledbottom>:

//gibt die LED unter led zurück
unsigned char ledbottom(unsigned char led) {
	if(led < 25) {return 126;}
 dc6:	89 31       	cpi	r24, 0x19	; 25
 dc8:	10 f0       	brcs	.+4      	; 0xdce <ledbottom+0x8>
	
	return (led - 25);
 dca:	89 51       	subi	r24, 0x19	; 25
 dcc:	08 95       	ret
	return (led + 25);
}

//gibt die LED unter led zurück
unsigned char ledbottom(unsigned char led) {
	if(led < 25) {return 126;}
 dce:	8e e7       	ldi	r24, 0x7E	; 126
	
	return (led - 25);
 dd0:	08 95       	ret

00000dd2 <SPI_MasterInit>:
//Zurückgegebene Werte	: keine
//----------------------------------------------------------------------------------------------
 void SPI_MasterInit(void)
 {
 /* Set MOSI and SCK output, all others input */
 DDRB |= (1<<PB3)|(1<<PB5);
 dd2:	84 b1       	in	r24, 0x04	; 4
 dd4:	88 62       	ori	r24, 0x28	; 40
 dd6:	84 b9       	out	0x04, r24	; 4
 PORTB |= (1<<PB3)|(1<<PB5);
 dd8:	85 b1       	in	r24, 0x05	; 5
 dda:	88 62       	ori	r24, 0x28	; 40
 ddc:	85 b9       	out	0x05, r24	; 5
 /* Enable SPI, Master, set clock rate fck/16 */
 SPCR |= (1<<SPE)|(1<<MSTR)|(1<<SPR1)|(1<<SPI2X);
 dde:	8c b5       	in	r24, 0x2c	; 44
 de0:	83 65       	ori	r24, 0x53	; 83
 de2:	8c bd       	out	0x2c, r24	; 44
 de4:	08 95       	ret

00000de6 <SPI_Send>:
 //Zurückgegebene Werte	: keine
 //----------------------------------------------------------------------------------------------
 void SPI_Send(char cData)
 {
 /* Start transmission */
 SPDR = cData;
 de6:	8e bd       	out	0x2e, r24	; 46
 /* Wait for transmission complete */
 while(!(SPSR & (1<<SPIF)));
 de8:	0d b4       	in	r0, 0x2d	; 45
 dea:	07 fe       	sbrs	r0, 7
 dec:	fd cf       	rjmp	.-6      	; 0xde8 <SPI_Send+0x2>
 dee:	08 95       	ret

00000df0 <__divmodhi4>:
 df0:	97 fb       	bst	r25, 7
 df2:	07 2e       	mov	r0, r23
 df4:	16 f4       	brtc	.+4      	; 0xdfa <__divmodhi4+0xa>
 df6:	00 94       	com	r0
 df8:	07 d0       	rcall	.+14     	; 0xe08 <__divmodhi4_neg1>
 dfa:	77 fd       	sbrc	r23, 7
 dfc:	09 d0       	rcall	.+18     	; 0xe10 <__divmodhi4_neg2>
 dfe:	0e 94 0c 07 	call	0xe18	; 0xe18 <__udivmodhi4>
 e02:	07 fc       	sbrc	r0, 7
 e04:	05 d0       	rcall	.+10     	; 0xe10 <__divmodhi4_neg2>
 e06:	3e f4       	brtc	.+14     	; 0xe16 <__divmodhi4_exit>

00000e08 <__divmodhi4_neg1>:
 e08:	90 95       	com	r25
 e0a:	81 95       	neg	r24
 e0c:	9f 4f       	sbci	r25, 0xFF	; 255
 e0e:	08 95       	ret

00000e10 <__divmodhi4_neg2>:
 e10:	70 95       	com	r23
 e12:	61 95       	neg	r22
 e14:	7f 4f       	sbci	r23, 0xFF	; 255

00000e16 <__divmodhi4_exit>:
 e16:	08 95       	ret

00000e18 <__udivmodhi4>:
 e18:	aa 1b       	sub	r26, r26
 e1a:	bb 1b       	sub	r27, r27
 e1c:	51 e1       	ldi	r21, 0x11	; 17
 e1e:	07 c0       	rjmp	.+14     	; 0xe2e <__udivmodhi4_ep>

00000e20 <__udivmodhi4_loop>:
 e20:	aa 1f       	adc	r26, r26
 e22:	bb 1f       	adc	r27, r27
 e24:	a6 17       	cp	r26, r22
 e26:	b7 07       	cpc	r27, r23
 e28:	10 f0       	brcs	.+4      	; 0xe2e <__udivmodhi4_ep>
 e2a:	a6 1b       	sub	r26, r22
 e2c:	b7 0b       	sbc	r27, r23

00000e2e <__udivmodhi4_ep>:
 e2e:	88 1f       	adc	r24, r24
 e30:	99 1f       	adc	r25, r25
 e32:	5a 95       	dec	r21
 e34:	a9 f7       	brne	.-22     	; 0xe20 <__udivmodhi4_loop>
 e36:	80 95       	com	r24
 e38:	90 95       	com	r25
 e3a:	bc 01       	movw	r22, r24
 e3c:	cd 01       	movw	r24, r26
 e3e:	08 95       	ret

00000e40 <do_rand>:
 e40:	8f 92       	push	r8
 e42:	9f 92       	push	r9
 e44:	af 92       	push	r10
 e46:	bf 92       	push	r11
 e48:	cf 92       	push	r12
 e4a:	df 92       	push	r13
 e4c:	ef 92       	push	r14
 e4e:	ff 92       	push	r15
 e50:	cf 93       	push	r28
 e52:	df 93       	push	r29
 e54:	ec 01       	movw	r28, r24
 e56:	68 81       	ld	r22, Y
 e58:	79 81       	ldd	r23, Y+1	; 0x01
 e5a:	8a 81       	ldd	r24, Y+2	; 0x02
 e5c:	9b 81       	ldd	r25, Y+3	; 0x03
 e5e:	61 15       	cp	r22, r1
 e60:	71 05       	cpc	r23, r1
 e62:	81 05       	cpc	r24, r1
 e64:	91 05       	cpc	r25, r1
 e66:	21 f4       	brne	.+8      	; 0xe70 <do_rand+0x30>
 e68:	64 e2       	ldi	r22, 0x24	; 36
 e6a:	79 ed       	ldi	r23, 0xD9	; 217
 e6c:	8b e5       	ldi	r24, 0x5B	; 91
 e6e:	97 e0       	ldi	r25, 0x07	; 7
 e70:	2d e1       	ldi	r18, 0x1D	; 29
 e72:	33 ef       	ldi	r19, 0xF3	; 243
 e74:	41 e0       	ldi	r20, 0x01	; 1
 e76:	50 e0       	ldi	r21, 0x00	; 0
 e78:	0e 94 7c 07 	call	0xef8	; 0xef8 <__divmodsi4>
 e7c:	49 01       	movw	r8, r18
 e7e:	5a 01       	movw	r10, r20
 e80:	9b 01       	movw	r18, r22
 e82:	ac 01       	movw	r20, r24
 e84:	a7 ea       	ldi	r26, 0xA7	; 167
 e86:	b1 e4       	ldi	r27, 0x41	; 65
 e88:	0e 94 9b 07 	call	0xf36	; 0xf36 <__muluhisi3>
 e8c:	6b 01       	movw	r12, r22
 e8e:	7c 01       	movw	r14, r24
 e90:	ac ee       	ldi	r26, 0xEC	; 236
 e92:	b4 ef       	ldi	r27, 0xF4	; 244
 e94:	a5 01       	movw	r20, r10
 e96:	94 01       	movw	r18, r8
 e98:	0e 94 a9 07 	call	0xf52	; 0xf52 <__mulohisi3>
 e9c:	dc 01       	movw	r26, r24
 e9e:	cb 01       	movw	r24, r22
 ea0:	8c 0d       	add	r24, r12
 ea2:	9d 1d       	adc	r25, r13
 ea4:	ae 1d       	adc	r26, r14
 ea6:	bf 1d       	adc	r27, r15
 ea8:	b7 ff       	sbrs	r27, 7
 eaa:	03 c0       	rjmp	.+6      	; 0xeb2 <do_rand+0x72>
 eac:	01 97       	sbiw	r24, 0x01	; 1
 eae:	a1 09       	sbc	r26, r1
 eb0:	b0 48       	sbci	r27, 0x80	; 128
 eb2:	88 83       	st	Y, r24
 eb4:	99 83       	std	Y+1, r25	; 0x01
 eb6:	aa 83       	std	Y+2, r26	; 0x02
 eb8:	bb 83       	std	Y+3, r27	; 0x03
 eba:	9f 77       	andi	r25, 0x7F	; 127
 ebc:	df 91       	pop	r29
 ebe:	cf 91       	pop	r28
 ec0:	ff 90       	pop	r15
 ec2:	ef 90       	pop	r14
 ec4:	df 90       	pop	r13
 ec6:	cf 90       	pop	r12
 ec8:	bf 90       	pop	r11
 eca:	af 90       	pop	r10
 ecc:	9f 90       	pop	r9
 ece:	8f 90       	pop	r8
 ed0:	08 95       	ret

00000ed2 <rand_r>:
 ed2:	0e 94 20 07 	call	0xe40	; 0xe40 <do_rand>
 ed6:	08 95       	ret

00000ed8 <rand>:
 ed8:	80 e0       	ldi	r24, 0x00	; 0
 eda:	91 e0       	ldi	r25, 0x01	; 1
 edc:	0e 94 20 07 	call	0xe40	; 0xe40 <do_rand>
 ee0:	08 95       	ret

00000ee2 <srand>:
 ee2:	a0 e0       	ldi	r26, 0x00	; 0
 ee4:	b0 e0       	ldi	r27, 0x00	; 0
 ee6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 eea:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 eee:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
 ef2:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
 ef6:	08 95       	ret

00000ef8 <__divmodsi4>:
 ef8:	05 2e       	mov	r0, r21
 efa:	97 fb       	bst	r25, 7
 efc:	1e f4       	brtc	.+6      	; 0xf04 <__divmodsi4+0xc>
 efe:	00 94       	com	r0
 f00:	0e 94 93 07 	call	0xf26	; 0xf26 <__negsi2>
 f04:	57 fd       	sbrc	r21, 7
 f06:	07 d0       	rcall	.+14     	; 0xf16 <__divmodsi4_neg2>
 f08:	0e 94 ae 07 	call	0xf5c	; 0xf5c <__udivmodsi4>
 f0c:	07 fc       	sbrc	r0, 7
 f0e:	03 d0       	rcall	.+6      	; 0xf16 <__divmodsi4_neg2>
 f10:	4e f4       	brtc	.+18     	; 0xf24 <__divmodsi4_exit>
 f12:	0c 94 93 07 	jmp	0xf26	; 0xf26 <__negsi2>

00000f16 <__divmodsi4_neg2>:
 f16:	50 95       	com	r21
 f18:	40 95       	com	r20
 f1a:	30 95       	com	r19
 f1c:	21 95       	neg	r18
 f1e:	3f 4f       	sbci	r19, 0xFF	; 255
 f20:	4f 4f       	sbci	r20, 0xFF	; 255
 f22:	5f 4f       	sbci	r21, 0xFF	; 255

00000f24 <__divmodsi4_exit>:
 f24:	08 95       	ret

00000f26 <__negsi2>:
 f26:	90 95       	com	r25
 f28:	80 95       	com	r24
 f2a:	70 95       	com	r23
 f2c:	61 95       	neg	r22
 f2e:	7f 4f       	sbci	r23, 0xFF	; 255
 f30:	8f 4f       	sbci	r24, 0xFF	; 255
 f32:	9f 4f       	sbci	r25, 0xFF	; 255
 f34:	08 95       	ret

00000f36 <__muluhisi3>:
 f36:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <__umulhisi3>
 f3a:	a5 9f       	mul	r26, r21
 f3c:	90 0d       	add	r25, r0
 f3e:	b4 9f       	mul	r27, r20
 f40:	90 0d       	add	r25, r0
 f42:	a4 9f       	mul	r26, r20
 f44:	80 0d       	add	r24, r0
 f46:	91 1d       	adc	r25, r1
 f48:	11 24       	eor	r1, r1
 f4a:	08 95       	ret

00000f4c <__mulshisi3>:
 f4c:	b7 ff       	sbrs	r27, 7
 f4e:	0c 94 9b 07 	jmp	0xf36	; 0xf36 <__muluhisi3>

00000f52 <__mulohisi3>:
 f52:	0e 94 9b 07 	call	0xf36	; 0xf36 <__muluhisi3>
 f56:	82 1b       	sub	r24, r18
 f58:	93 0b       	sbc	r25, r19
 f5a:	08 95       	ret

00000f5c <__udivmodsi4>:
 f5c:	a1 e2       	ldi	r26, 0x21	; 33
 f5e:	1a 2e       	mov	r1, r26
 f60:	aa 1b       	sub	r26, r26
 f62:	bb 1b       	sub	r27, r27
 f64:	fd 01       	movw	r30, r26
 f66:	0d c0       	rjmp	.+26     	; 0xf82 <__udivmodsi4_ep>

00000f68 <__udivmodsi4_loop>:
 f68:	aa 1f       	adc	r26, r26
 f6a:	bb 1f       	adc	r27, r27
 f6c:	ee 1f       	adc	r30, r30
 f6e:	ff 1f       	adc	r31, r31
 f70:	a2 17       	cp	r26, r18
 f72:	b3 07       	cpc	r27, r19
 f74:	e4 07       	cpc	r30, r20
 f76:	f5 07       	cpc	r31, r21
 f78:	20 f0       	brcs	.+8      	; 0xf82 <__udivmodsi4_ep>
 f7a:	a2 1b       	sub	r26, r18
 f7c:	b3 0b       	sbc	r27, r19
 f7e:	e4 0b       	sbc	r30, r20
 f80:	f5 0b       	sbc	r31, r21

00000f82 <__udivmodsi4_ep>:
 f82:	66 1f       	adc	r22, r22
 f84:	77 1f       	adc	r23, r23
 f86:	88 1f       	adc	r24, r24
 f88:	99 1f       	adc	r25, r25
 f8a:	1a 94       	dec	r1
 f8c:	69 f7       	brne	.-38     	; 0xf68 <__udivmodsi4_loop>
 f8e:	60 95       	com	r22
 f90:	70 95       	com	r23
 f92:	80 95       	com	r24
 f94:	90 95       	com	r25
 f96:	9b 01       	movw	r18, r22
 f98:	ac 01       	movw	r20, r24
 f9a:	bd 01       	movw	r22, r26
 f9c:	cf 01       	movw	r24, r30
 f9e:	08 95       	ret

00000fa0 <__umulhisi3>:
 fa0:	a2 9f       	mul	r26, r18
 fa2:	b0 01       	movw	r22, r0
 fa4:	b3 9f       	mul	r27, r19
 fa6:	c0 01       	movw	r24, r0
 fa8:	a3 9f       	mul	r26, r19
 faa:	70 0d       	add	r23, r0
 fac:	81 1d       	adc	r24, r1
 fae:	11 24       	eor	r1, r1
 fb0:	91 1d       	adc	r25, r1
 fb2:	b2 9f       	mul	r27, r18
 fb4:	70 0d       	add	r23, r0
 fb6:	81 1d       	adc	r24, r1
 fb8:	11 24       	eor	r1, r1
 fba:	91 1d       	adc	r25, r1
 fbc:	08 95       	ret

00000fbe <_exit>:
 fbe:	f8 94       	cli

00000fc0 <__stop_program>:
 fc0:	ff cf       	rjmp	.-2      	; 0xfc0 <__stop_program>
